{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Invoice Generator\n\n## Overview\n\nThis is a full-stack invoice generator application built with React and Express.js. The application allows users to create, manage, and send professional invoices with features like PDF generation, email delivery, QR code integration, and invoice hosting. The system supports both draft management and persistent invoice storage with a complete invoice lifecycle from creation to payment tracking.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Library**: Shadcn/ui components built on Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables\n- **State Management**: TanStack React Query for server state and local React state for UI\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation integration\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Database Provider**: Neon serverless PostgreSQL\n- **Session Management**: Express sessions with PostgreSQL session store\n- **File Handling**: Multer for image uploads with size and type validation\n- **Development**: Hot module reloading with Vite integration\n\n### Database Design\n- **Invoice Table**: Comprehensive invoice data including company info, client details, financial calculations, and hosting options\n- **Line Items Table**: Individual invoice line items with foreign key relationship to invoices\n- **Schema Management**: Drizzle migrations with PostgreSQL-specific features\n- **Data Validation**: Zod schemas shared between frontend and backend\n\n### Core Features\n- **Invoice Management**: Full CRUD operations for invoices with draft and published states\n- **PDF Generation**: Client-side PDF creation using React-PDF library\n- **Email Integration**: SMTP-based email delivery with customizable templates\n- **QR Code Generation**: Dynamic QR codes for hosted invoices\n- **Image Handling**: Logo upload and storage with optimization\n- **Invoice Hosting**: Public invoice hosting with optional password protection\n\n### Development Workflow\n- **Monorepo Structure**: Shared types and schemas between client and server\n- **Type Safety**: End-to-end TypeScript with strict compilation\n- **Code Organization**: Feature-based component structure with reusable UI components\n- **Build Process**: Separate client and server builds with production optimization\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle ORM**: Type-safe database toolkit with migration support\n\n### Email Services\n- **Nodemailer**: SMTP email client supporting various providers\n- **Email Templates**: HTML email generation with invoice attachments\n\n### File Processing\n- **QRCode Library**: QR code generation for invoice links\n- **React-PDF**: Client-side PDF document generation\n- **Multer**: Server-side file upload handling\n\n### UI Dependencies\n- **Radix UI**: Headless UI primitives for accessibility\n- **Lucide React**: Icon library with consistent design\n- **Tailwind CSS**: Utility-first CSS framework\n- **Class Variance Authority**: Type-safe component variants\n\n### Development Tools\n- **Vite**: Fast build tool with hot module reloading\n- **TypeScript**: Static type checking across the stack\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **Replit Integration**: Development environment optimizations","size_bytes":3659},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: false, limit: '10mb' }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2098},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertInvoiceSchema, insertLineItemSchema, updateInvoiceSchema, sendEmailSchema, type CreateInvoiceRequest } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport nodemailer from \"nodemailer\";\nimport multer from \"multer\";\nimport { addUserIdentifier } from \"./user-identifier\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  limits: { fileSize: 2 * 1024 * 1024 }, // 2MB limit\n  fileFilter: (req: any, file: any, cb: any) => {\n    if (file.mimetype.startsWith('image/')) {\n      cb(null, true);\n    } else {\n      cb(new Error('Only image files are allowed'));\n    }\n  }\n});\n\n// Configure nodemailer\nconst transporter = nodemailer.createTransport({\n  host: 'mail.jetourmultan.com',\n  port: 465,\n  secure: true,\n  auth: {\n    user: 'accounts@jetourmultan.com',\n    pass: 'Dawood@1',\n  },\n});\n\nconst createInvoiceRequestSchema = z.object({\n  invoice: insertInvoiceSchema,\n  lineItems: z.array(insertLineItemSchema),\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  console.log('Registering routes...');\n  \n  // Add user identification middleware to all API routes\n  app.use('/api', addUserIdentifier);\n  \n  // Simple test route to verify routing works\n  app.get(\"/api/test\", (req, res) => {\n    console.log('Test route accessed');\n    res.json({ message: \"Routes are working!\", timestamp: new Date().toISOString() });\n  });\n  \n  console.log('All API routes registered successfully');\n  \n  // Add a catch-all route for debugging (this should only catch non-API routes)\n  app.use('*', (req, res, next) => {\n    if (req.originalUrl.startsWith('/api/')) {\n      console.log('API route not matched:', req.method, req.originalUrl);\n    }\n    console.log('Unmatched route:', req.method, req.originalUrl);\n    next();\n  });\n  \n  console.log('Setting up /api/invoices route...');\n  // Get all invoices for current user\n  app.get(\"/api/invoices\", async (req: any, res) => {\n    console.log('GET /api/invoices route hit for user:', req.userId);\n    try {\n      const invoices = await storage.getAllInvoices(req.userId);\n      console.log('Total invoices in storage for user:', invoices.length);\n      res.json(invoices);\n    } catch (error) {\n      console.error('Error in /api/invoices:', error);\n      res.status(500).json({ message: \"Failed to fetch invoices\" });\n    }\n  });\n\n  // Get single invoice for current user\n  app.get(\"/api/invoices/:id\", async (req: any, res) => {\n    try {\n      const invoice = await storage.getInvoice(req.params.id, req.userId);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      res.json(invoice);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch invoice\" });\n    }\n  });\n\n  // Create new invoice for current user\n  app.post(\"/api/invoices\", async (req: any, res) => {\n    try {\n      const validatedData = createInvoiceRequestSchema.parse(req.body);\n      const invoice = await storage.createInvoice(validatedData, req.userId);\n      res.status(201).json(invoice);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create invoice\" });\n    }\n  });\n\n  // Update invoice for current user\n  app.patch(\"/api/invoices/:id\", async (req: any, res) => {\n    try {\n      const validatedData = updateInvoiceSchema.parse(req.body);\n      const invoice = await storage.updateInvoice(req.params.id, validatedData, req.userId);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      res.json(invoice);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update invoice\" });\n    }\n  });\n\n  // Delete invoice for current user\n  app.delete(\"/api/invoices/:id\", async (req: any, res) => {\n    try {\n      const success = await storage.deleteInvoice(req.params.id, req.userId);\n      if (!success) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete invoice\" });\n    }\n  });\n\n  // Upload logo\n  app.post(\"/api/upload-logo\", upload.single('logo'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      // Convert to base64\n      const base64 = `data:${req.file.mimetype};base64,${req.file.buffer.toString('base64')}`;\n      \n      res.json({ logo: base64 });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to upload logo\" });\n    }\n  });\n\n  // Get hosted URL for an invoice (for QR code generation)\n  app.get(\"/api/invoices/:id/hosted-url\", async (req: any, res) => {\n    try {\n      const invoice = await storage.getInvoice(req.params.id, req.userId);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n\n      // Get the correct domain from environment variables\n      const replitDomain = process.env.REPLIT_DEV_DOMAIN || process.env.REPLIT_DOMAINS || 'localhost:5000';\n      const baseUrl = replitDomain.includes('localhost') ? `http://${replitDomain}` : `https://${replitDomain}`;\n      const hostedUrl = `${baseUrl}/view/${invoice.id}`;\n\n      // Update the invoice with the correct hosted URL if it's different\n      if (invoice.hostedUrl !== hostedUrl) {\n        await storage.updateInvoice(req.params.id, { hostedUrl, isHosted: true }, req.userId);\n      }\n\n      res.json({ hostedUrl });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get hosted URL\" });\n    }\n  });\n\n  // Send invoice via email\n  app.post(\"/api/invoices/:id/send-email\", async (req: any, res) => {\n    try {\n      const validatedData = sendEmailSchema.parse(req.body);\n      const invoice = await storage.getInvoice(req.params.id, req.userId);\n      \n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n\n      // Get the correct domain from environment variables\n      const replitDomain = process.env.REPLIT_DEV_DOMAIN || process.env.REPLIT_DOMAINS || 'localhost:5000';\n      const baseUrl = replitDomain.includes('localhost') ? `http://${replitDomain}` : `https://${replitDomain}`;\n      const invoiceViewUrl = invoice.hostedUrl || `${baseUrl}/view/${invoice.id}`;\n      \n      const mailOptions = {\n        from: 'accounts@jetourmultan.com',\n        to: validatedData.to,\n        subject: validatedData.subject || `Invoice ${invoice.invoiceNumber}`,\n        text: validatedData.message || `Please find your invoice details below.\\n\\nView Online: ${invoiceViewUrl}`,\n        html: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 8px;\">\n            <div style=\"text-align: center; margin-bottom: 30px;\">\n              <h2 style=\"color: #333; margin: 0;\">Invoice ${invoice.invoiceNumber}</h2>\n              <p style=\"color: #666; margin: 5px 0 0 0;\">from ${invoice.companyName}</p>\n            </div>\n            \n            <p>Dear ${invoice.clientName},</p>\n            <p>${validatedData.message || 'Please find your invoice details below.'}</p>\n            \n            <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 6px; margin: 20px 0;\">\n              <h3 style=\"color: #333; margin-top: 0;\">Invoice Details:</h3>\n              <ul style=\"list-style: none; padding: 0; margin: 0;\">\n                <li style=\"padding: 8px 0; border-bottom: 1px solid #e0e0e0;\"><strong>Invoice Number:</strong> ${invoice.invoiceNumber}</li>\n                <li style=\"padding: 8px 0; border-bottom: 1px solid #e0e0e0;\"><strong>Date:</strong> ${new Date(invoice.invoiceDate).toLocaleDateString()}</li>\n                <li style=\"padding: 8px 0; border-bottom: 1px solid #e0e0e0;\"><strong>Total Amount:</strong> <span style=\"color: #28a745; font-size: 1.2em;\">$${invoice.total}</span></li>\n                ${invoice.dueDate ? `<li style=\"padding: 8px 0;\"><strong>Due Date:</strong> ${new Date(invoice.dueDate).toLocaleDateString()}</li>` : ''}\n              </ul>\n            </div>\n            \n            <div style=\"text-align: center; margin: 30px 0;\">\n              <a href=\"${invoiceViewUrl}\" style=\"background-color: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block; font-weight: bold;\">📄 View Invoice Online</a>\n            </div>\n            \n            <p style=\"font-size: 14px; color: #666; margin-top: 30px;\">You can view and download your invoice anytime by clicking the link above.</p>\n            \n            <hr style=\"border: none; height: 1px; background-color: #e0e0e0; margin: 30px 0;\">\n            \n            <p>Thank you for your business!</p>\n            <p style=\"margin: 0;\">Best regards,<br><strong>${invoice.companyName}</strong></p>\n            ${invoice.companyEmail ? `<p style=\"margin: 5px 0 0 0; color: #666;\">📧 ${invoice.companyEmail}</p>` : ''}\n            ${invoice.companyPhone ? `<p style=\"margin: 5px 0 0 0; color: #666;\">📞 ${invoice.companyPhone}</p>` : ''}\n          </div>\n        `\n      };\n\n      await transporter.sendMail(mailOptions);\n      \n      // Update invoice status to sent and ensure hosted URL is set if hosting enabled\n      const updateData: any = { status: \"sent\" };\n      if (invoice.isHosted && !invoice.hostedUrl) {\n        // Get the correct domain from environment variables\n        const replitDomain = process.env.REPLIT_DEV_DOMAIN || process.env.REPLIT_DOMAINS || 'localhost:5000';\n        const baseUrl = replitDomain.includes('localhost') ? `http://${replitDomain}` : `https://${replitDomain}`;\n        updateData.hostedUrl = `${baseUrl}/view/${invoice.id}`;\n      }\n      await storage.updateInvoice(req.params.id, updateData, req.userId);\n      \n      res.json({ message: \"Email sent successfully\" });\n    } catch (error) {\n      console.error('Email sending failed:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to send email\" });\n    }\n  });\n\n  // Public invoice viewing route (no authentication required)\n  app.get(\"/api/public/invoices/:id\", async (req, res) => {\n    try {\n      const invoice = await storage.getInvoicePublic(req.params.id);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      res.json(invoice);\n    } catch (error) {\n      console.error('Error in /api/public/invoices/:id:', error);\n      res.status(500).json({ message: \"Failed to fetch invoice\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":11087},"server/storage.ts":{"content":"import { type Invoice, type InsertInvoice, type UpdateInvoice, type LineItem, type InsertLineItem, type InvoiceWithLineItems, type CreateInvoiceRequest } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Invoice operations - now user-aware\n  getInvoice(id: string, userId: string): Promise<InvoiceWithLineItems | undefined>;\n  getAllInvoices(userId: string): Promise<InvoiceWithLineItems[]>;\n  createInvoice(request: CreateInvoiceRequest, userId: string): Promise<InvoiceWithLineItems>;\n  updateInvoice(id: string, invoice: UpdateInvoice, userId: string): Promise<InvoiceWithLineItems | undefined>;\n  deleteInvoice(id: string, userId: string): Promise<boolean>;\n  \n  // Public invoice viewing (no user authentication)\n  getInvoicePublic(id: string): Promise<InvoiceWithLineItems | undefined>;\n  \n  // Line item operations - now user-aware\n  getLineItemsByInvoiceId(invoiceId: string, userId: string): Promise<LineItem[]>;\n  addLineItem(invoiceId: string, lineItem: InsertLineItem, userId: string): Promise<LineItem>;\n  updateLineItem(id: string, lineItem: Partial<LineItem>, userId: string): Promise<LineItem | undefined>;\n  deleteLineItem(id: string, userId: string): Promise<boolean>;\n  \n  // Utility - now user-aware\n  getInvoiceByNumber(invoiceNumber: string, userId: string): Promise<InvoiceWithLineItems | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private userInvoices: Map<string, Map<string, Invoice>>;\n  private userLineItems: Map<string, Map<string, LineItem>>;\n\n  constructor() {\n    this.userInvoices = new Map();\n    this.userLineItems = new Map();\n  }\n\n  private getUserInvoices(userId: string): Map<string, Invoice> {\n    if (!this.userInvoices.has(userId)) {\n      this.userInvoices.set(userId, new Map());\n      // Initialize with demo data for new users\n      this.initializeDemoDataForUser(userId);\n    }\n    return this.userInvoices.get(userId)!;\n  }\n\n  private getUserLineItems(userId: string): Map<string, LineItem> {\n    if (!this.userLineItems.has(userId)) {\n      this.userLineItems.set(userId, new Map());\n    }\n    return this.userLineItems.get(userId)!;\n  }\n\n  private initializeDemoDataForUser(userId: string) {\n    // No demo data - users start with clean slate\n  }\n\n  async getInvoice(id: string, userId: string): Promise<InvoiceWithLineItems | undefined> {\n    const userInvoices = this.getUserInvoices(userId);\n    const invoice = userInvoices.get(id);\n    if (!invoice) return undefined;\n    \n    const lineItems = await this.getLineItemsByInvoiceId(id, userId);\n    return { ...invoice, lineItems };\n  }\n\n  async getAllInvoices(userId: string): Promise<InvoiceWithLineItems[]> {\n    const userInvoices = this.getUserInvoices(userId);\n    const invoices = Array.from(userInvoices.values());\n    const invoicesWithLineItems = await Promise.all(\n      invoices.map(async (invoice) => {\n        const lineItems = await this.getLineItemsByInvoiceId(invoice.id, userId);\n        return { ...invoice, lineItems };\n      })\n    );\n    \n    return invoicesWithLineItems.sort((a, b) => \n      new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime()\n    );\n  }\n\n  async createInvoice(request: CreateInvoiceRequest, userId: string): Promise<InvoiceWithLineItems> {\n    const id = randomUUID();\n    const now = new Date();\n    \n    // Calculate totals\n    const subtotal = request.lineItems.reduce((sum, item) => {\n      const amount = parseFloat(item.rate) * (item.quantity || 1);\n      return sum + amount;\n    }, 0);\n    \n    const taxPercentage = parseFloat(request.invoice.taxPercentage || \"0\");\n    const shippingCost = parseFloat(request.invoice.shippingCost || \"0\");\n    const taxAmount = (subtotal * taxPercentage) / 100;\n    const total = subtotal + taxAmount + shippingCost;\n    \n    const invoice: Invoice = {\n      id,\n      invoiceNumber: request.invoice.invoiceNumber,\n      status: request.invoice.status || 'draft',\n      companyName: request.invoice.companyName,\n      companyEmail: request.invoice.companyEmail,\n      companyPhone: request.invoice.companyPhone || null,\n      companyWebsite: request.invoice.companyWebsite || null,\n      companyAddress: request.invoice.companyAddress || null,\n      companyLogo: request.invoice.companyLogo || null,\n      clientName: request.invoice.clientName,\n      clientEmail: request.invoice.clientEmail,\n      clientCompany: request.invoice.clientCompany || null,\n      clientPhone: request.invoice.clientPhone || null,\n      clientAddress: request.invoice.clientAddress || null,\n      invoiceDate: request.invoice.invoiceDate,\n      dueDate: request.invoice.dueDate || null,\n      notes: request.invoice.notes || null,\n      textInformation: request.invoice.textInformation || null,\n      shippingCode: request.invoice.shippingCode || null,\n      currency: request.invoice.currency || \"USD\",\n      subtotal: subtotal.toFixed(2),\n      taxPercentage: request.invoice.taxPercentage || \"0\",\n      tax: taxAmount.toFixed(2),\n      shippingCost: request.invoice.shippingCost || \"0\",\n      total: total.toFixed(2),\n      template: request.invoice.template || \"classic\",\n      documentType: request.invoice.documentType || \"invoice\",\n      primaryColor: request.invoice.primaryColor || \"#2563eb\",\n      secondaryColor: request.invoice.secondaryColor || \"#64748b\",\n      fontFamily: request.invoice.fontFamily || \"Inter\",\n      isHosted: request.invoice.isHosted || false,\n      isPasswordProtected: request.invoice.isPasswordProtected || false,\n      password: request.invoice.password || null,\n      hostedUrl: null, // Will be set by route handler if hosted\n      createdAt: now,\n      updatedAt: now,\n    };\n    \n    const userInvoices = this.getUserInvoices(userId);\n    const userLineItems = this.getUserLineItems(userId);\n    userInvoices.set(id, invoice);\n    \n    // Create line items\n    const lineItems: LineItem[] = [];\n    for (const item of request.lineItems) {\n      const lineItemId = randomUUID();\n      const lineItem: LineItem = {\n        id: lineItemId,\n        invoiceId: id,\n        description: item.description,\n        quantity: item.quantity || 1,\n        rate: item.rate,\n        amount: (parseFloat(item.rate) * (item.quantity || 1)).toFixed(2),\n      };\n      userLineItems.set(lineItemId, lineItem);\n      lineItems.push(lineItem);\n    }\n    \n    return { ...invoice, lineItems };\n  }\n\n  async updateInvoice(id: string, updateData: UpdateInvoice, userId: string): Promise<InvoiceWithLineItems | undefined> {\n    const userInvoices = this.getUserInvoices(userId);\n    const invoice = userInvoices.get(id);\n    if (!invoice) return undefined;\n    \n    const updatedInvoice: Invoice = {\n      ...invoice,\n      ...updateData,\n      companyPhone: updateData.companyPhone || invoice.companyPhone,\n      companyWebsite: updateData.companyWebsite || invoice.companyWebsite,\n      companyAddress: updateData.companyAddress || invoice.companyAddress,\n      clientCompany: updateData.clientCompany || invoice.clientCompany,\n      clientPhone: updateData.clientPhone || invoice.clientPhone,\n      clientAddress: updateData.clientAddress || invoice.clientAddress,\n      dueDate: updateData.dueDate || invoice.dueDate,\n      notes: updateData.notes || invoice.notes,\n      password: updateData.password || invoice.password,\n      updatedAt: new Date(),\n    };\n    \n    userInvoices.set(id, updatedInvoice);\n    const lineItems = await this.getLineItemsByInvoiceId(id, userId);\n    return { ...updatedInvoice, lineItems };\n  }\n\n  async deleteInvoice(id: string, userId: string): Promise<boolean> {\n    const userInvoices = this.getUserInvoices(userId);\n    const userLineItems = this.getUserLineItems(userId);\n    \n    // Delete associated line items first\n    const lineItems = await this.getLineItemsByInvoiceId(id, userId);\n    lineItems.forEach(item => userLineItems.delete(item.id));\n    \n    return userInvoices.delete(id);\n  }\n\n  async getLineItemsByInvoiceId(invoiceId: string, userId: string): Promise<LineItem[]> {\n    const userLineItems = this.getUserLineItems(userId);\n    return Array.from(userLineItems.values()).filter(\n      item => item.invoiceId === invoiceId\n    );\n  }\n\n  async addLineItem(invoiceId: string, lineItem: InsertLineItem, userId: string): Promise<LineItem> {\n    const id = randomUUID();\n    const newLineItem: LineItem = {\n      id,\n      invoiceId: invoiceId,\n      description: lineItem.description,\n      quantity: lineItem.quantity || 1,\n      rate: lineItem.rate,\n      amount: (parseFloat(lineItem.rate) * (lineItem.quantity || 1)).toFixed(2),\n    };\n    \n    const userLineItems = this.getUserLineItems(userId);\n    userLineItems.set(id, newLineItem);\n    return newLineItem;\n  }\n\n  async updateLineItem(id: string, updateData: Partial<LineItem>, userId: string): Promise<LineItem | undefined> {\n    const userLineItems = this.getUserLineItems(userId);\n    const lineItem = userLineItems.get(id);\n    if (!lineItem) return undefined;\n    \n    const updatedLineItem: LineItem = {\n      ...lineItem,\n      ...updateData,\n    };\n    \n    // Recalculate amount if rate or quantity changed\n    if (updateData.rate || updateData.quantity) {\n      const rate = updateData.rate || lineItem.rate;\n      const quantity = updateData.quantity || lineItem.quantity;\n      updatedLineItem.amount = (parseFloat(rate) * quantity).toFixed(2);\n    }\n    \n    userLineItems.set(id, updatedLineItem);\n    return updatedLineItem;\n  }\n\n  async deleteLineItem(id: string, userId: string): Promise<boolean> {\n    const userLineItems = this.getUserLineItems(userId);\n    return userLineItems.delete(id);\n  }\n\n  async getInvoiceByNumber(invoiceNumber: string, userId: string): Promise<InvoiceWithLineItems | undefined> {\n    const userInvoices = this.getUserInvoices(userId);\n    const invoice = Array.from(userInvoices.values()).find(\n      inv => inv.invoiceNumber === invoiceNumber\n    );\n    \n    if (!invoice) return undefined;\n    \n    const lineItems = await this.getLineItemsByInvoiceId(invoice.id, userId);\n    return { ...invoice, lineItems };\n  }\n\n  async getInvoicePublic(id: string): Promise<InvoiceWithLineItems | undefined> {\n    // Search through all users' invoices for a public hosted invoice\n    const userEntries = Array.from(this.userInvoices.entries());\n    for (const [userId, userInvoices] of userEntries) {\n      const invoice = userInvoices.get(id);\n      if (invoice && invoice.isHosted) {\n        // Get line items for this invoice\n        const lineItems = await this.getLineItemsByInvoiceId(id, userId);\n        return { ...invoice, lineItems };\n      }\n    }\n    return undefined;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":10643},"server/user-identifier.ts":{"content":"import { Request } from \"express\";\nimport { createHash } from \"crypto\";\n\n/**\n * Generates a unique user identifier based on system information\n * Uses IP address, user agent, and other request headers to create a consistent identifier\n */\nexport function generateUserIdentifier(req: Request): string {\n  // Get the real IP address, considering proxies and load balancers\n  const ip = req.ip || \n             req.connection?.remoteAddress || \n             req.socket?.remoteAddress || \n             req.headers['x-forwarded-for']?.toString()?.split(',')[0]?.trim() ||\n             req.headers['x-real-ip']?.toString() ||\n             'unknown';\n\n  // Get user agent\n  const userAgent = req.headers['user-agent'] || 'unknown';\n  \n  // Get accept-language as additional identifier\n  const acceptLanguage = req.headers['accept-language'] || 'unknown';\n  \n  // Create a hash from these identifiers\n  const identifier = `${ip}-${userAgent}-${acceptLanguage}`;\n  const hash = createHash('sha256').update(identifier).digest('hex');\n  \n  // Return first 16 characters for readability\n  return hash.substring(0, 16);\n}\n\n/**\n * Middleware to add user identifier to request\n */\nexport function addUserIdentifier(req: any, res: any, next: any) {\n  req.userId = generateUserIdentifier(req);\n  next();\n}","size_bytes":1288},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const invoices = pgTable(\"invoices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceNumber: text(\"invoice_number\").notNull().unique(),\n  status: text(\"status\").notNull().default(\"draft\"), // draft, sent, paid, overdue\n  \n  // Company info\n  companyName: text(\"company_name\").notNull(),\n  companyEmail: text(\"company_email\").notNull(),\n  companyPhone: text(\"company_phone\"),\n  companyWebsite: text(\"company_website\"),\n  companyAddress: text(\"company_address\"),\n  companyLogo: text(\"company_logo\"), // base64 encoded image\n  \n  // Client info\n  clientName: text(\"client_name\").notNull(),\n  clientEmail: text(\"client_email\").notNull(),\n  clientCompany: text(\"client_company\"),\n  clientPhone: text(\"client_phone\"),\n  clientAddress: text(\"client_address\"),\n  \n  // Invoice details\n  invoiceDate: text(\"invoice_date\").notNull(),\n  dueDate: text(\"due_date\"),\n  notes: text(\"notes\"),\n  textInformation: text(\"text_information\"),\n  shippingCode: text(\"shipping_code\"),\n  \n  // Financial\n  currency: text(\"currency\").notNull().default(\"USD\"),\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  taxPercentage: decimal(\"tax_percentage\", { precision: 5, scale: 2 }).notNull().default(\"0\"),\n  tax: decimal(\"tax\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  shippingCost: decimal(\"shipping_cost\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull().default(\"0\"),\n  \n  // Template & design\n  template: text(\"template\").notNull().default(\"classic\"),\n  documentType: text(\"document_type\").notNull().default(\"invoice\"), // invoice, credit-note, quote, purchase-order\n  primaryColor: text(\"primary_color\").notNull().default(\"#2563eb\"),\n  secondaryColor: text(\"secondary_color\").notNull().default(\"#64748b\"),\n  fontFamily: text(\"font_family\").notNull().default(\"Inter\"),\n  \n  // Hosting & security\n  isHosted: boolean(\"is_hosted\").default(false),\n  isPasswordProtected: boolean(\"is_password_protected\").default(false),\n  password: text(\"password\"),\n  hostedUrl: text(\"hosted_url\"),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const lineItems = pgTable(\"line_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceId: varchar(\"invoice_id\").notNull().references(() => invoices.id, { onDelete: \"cascade\" }),\n  description: text(\"description\").notNull(),\n  quantity: integer(\"quantity\").notNull().default(1),\n  rate: decimal(\"rate\", { precision: 10, scale: 2 }).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n});\n\nexport const insertInvoiceSchema = createInsertSchema(invoices).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  hostedUrl: true,\n});\n\nexport const insertLineItemSchema = createInsertSchema(lineItems).omit({\n  id: true,\n  invoiceId: true,\n});\n\nexport const updateInvoiceSchema = insertInvoiceSchema.partial().extend({\n  hostedUrl: z.string().optional(),\n});\n\n// Email schema for sending invoices\nexport const sendEmailSchema = z.object({\n  to: z.string().email(),\n  subject: z.string().min(1),\n  message: z.string().optional(),\n  attachPDF: z.boolean().default(true),\n});\n\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\nexport type UpdateInvoice = z.infer<typeof updateInvoiceSchema>;\nexport type LineItem = typeof lineItems.$inferSelect;\nexport type InsertLineItem = z.infer<typeof insertLineItemSchema>;\nexport type SendEmail = z.infer<typeof sendEmailSchema>;\n\n// Frontend-specific types\nexport type InvoiceWithLineItems = Invoice & {\n  lineItems: LineItem[];\n};\n\nexport type CreateInvoiceRequest = {\n  invoice: InsertInvoice;\n  lineItems: Omit<InsertLineItem, 'invoiceId'>[];\n};\n","size_bytes":4048},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/hooks/use-theme\";\nimport Navigation from \"@/components/navigation\";\nimport Footer from \"@/components/footer\";\nimport CreateInvoice from \"@/pages/create-invoice\";\nimport InvoiceHistory from \"@/pages/invoice-history\";\nimport InvoiceView from \"@/pages/invoice-view\";\nimport About from \"@/pages/about\";\nimport Contact from \"@/pages/contact\";\nimport Privacy from \"@/pages/privacy\";\nimport Terms from \"@/pages/terms\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen flex flex-col relative\">\n      {/* Modern background */}\n      <div className=\"fixed inset-0 -z-10\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-background via-background to-accent/30\"></div>\n        <div className=\"absolute top-0 left-0 w-full h-full opacity-30\">\n          <div className=\"absolute top-20 right-20 w-72 h-72 bg-primary/10 rounded-full blur-3xl\"></div>\n          <div className=\"absolute bottom-20 left-20 w-96 h-96 bg-primary/5 rounded-full blur-3xl\"></div>\n        </div>\n      </div>\n      \n      <Navigation />\n      <main className=\"flex-1\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 w-full fade-in-up\">\n          <Switch>\n            <Route path=\"/\" component={CreateInvoice} />\n            <Route path=\"/create\" component={CreateInvoice} />\n            <Route path=\"/history\" component={InvoiceHistory} />\n            <Route path=\"/edit/:id\" component={CreateInvoice} />\n            <Route path=\"/view/:id\" component={InvoiceView} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/contact\" component={Contact} />\n            <Route path=\"/privacy\" component={Privacy} />\n            <Route path=\"/terms\" component={Terms} />\n          </Switch>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"invoice-pro-theme\">\n        <TooltipProvider>\n          <div className=\"transition-all duration-500 ease-in-out\">\n            <Toaster />\n            <Router />\n          </div>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2495},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@200;300;400;500;600;700;800;900&family=Figtree:wght@300;400;500;600;700;800;900&family=Satoshi:wght@300;400;500;600;700;800;900&display=swap');\n@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Mobile-first responsive design improvements */\n@layer base {\n  /* Ensure inputs are properly sized on mobile */\n  input, textarea, select {\n    font-size: 16px !important; /* Prevents zoom on iOS */\n  }\n\n  /* Better touch targets on mobile */\n  button, a {\n    min-height: 44px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  /* Improve table readability on mobile */\n  @media (max-width: 640px) {\n    table {\n      font-size: 14px;\n    }\n  }\n\n  /* Modern typography */\n  body {\n    background: hsl(var(--background));\n    min-height: 100vh;\n    font-family: 'Inter', 'Figtree', system-ui, -apple-system, sans-serif;\n    font-optical-sizing: auto;\n    font-weight: 400;\n    font-style: normal;\n    letter-spacing: -0.01em;\n    line-height: 1.6;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  /* Modern glass morphism */\n  .glass {\n    background: hsl(var(--card) / 0.8);\n    backdrop-filter: blur(20px);\n    border: 1px solid hsl(var(--border));\n    box-shadow: var(--shadow-lg);\n    border-radius: calc(var(--radius) * 1.5);\n  }\n\n  .dark .glass {\n    background: hsl(var(--card) / 0.9);\n    border: 1px solid hsl(var(--border));\n    box-shadow: var(--shadow-xl);\n  }\n\n  /* Modern gradient backgrounds */\n  .gradient-primary {\n    background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(263 70% 70%) 100%);\n  }\n\n  .gradient-subtle {\n    background: linear-gradient(135deg, hsl(var(--primary) / 0.05) 0%, hsl(var(--accent)) 100%);\n  }\n\n  .gradient-animated {\n    background: linear-gradient(-45deg, hsl(var(--primary)), hsl(263 70% 60%), hsl(262 83% 70%), hsl(220 14% 96%));\n    background-size: 400% 400%;\n    animation: gradientShift 15s ease infinite;\n  }\n\n  @keyframes gradientShift {\n    0% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n    100% { background-position: 0% 50%; }\n  }\n\n  /* Typography utilities */\n  .font-display {\n    font-family: 'Figtree', 'Inter', system-ui, sans-serif;\n    font-weight: 600;\n    letter-spacing: -0.025em;\n  }\n\n  .font-body {\n    font-family: 'Inter', system-ui, sans-serif;\n    letter-spacing: -0.01em;\n  }\n\n  /* Premium shadows */\n  .shadow-premium {\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  }\n\n  /* Enhanced hover animations */\n  .hover-lift {\n    @apply transition-all duration-500 ease-out;\n    transform-style: preserve-3d;\n  }\n\n  .hover-lift:hover {\n    @apply transform -translate-y-2;\n    box-shadow: 0 20px 40px rgba(255, 20, 147, 0.2), 0 8px 16px rgba(255, 20, 147, 0.1);\n  }\n\n  /* Enhanced button animations */\n  .btn-animate {\n    @apply transition-all duration-300 ease-in-out;\n    position: relative;\n    overflow: hidden;\n  }\n\n  .btn-animate::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n    transition: left 0.5s ease;\n  }\n\n  .btn-animate:hover::before {\n    left: 100%;\n  }\n\n  .btn-animate:hover {\n    @apply transform scale-105;\n    box-shadow: 0 8px 25px rgba(255, 20, 147, 0.3);\n  }\n\n  .btn-animate:active {\n    @apply transform scale-95;\n  }\n\n  /* Floating animation */\n  .float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n  }\n\n  /* Fade in animations */\n  .fade-in {\n    animation: fadeIn 0.8s ease-out forwards;\n  }\n\n  .fade-in-up {\n    animation: fadeInUp 0.8s ease-out forwards;\n  }\n\n  .fade-in-delay-1 { animation-delay: 0.1s; }\n  .fade-in-delay-2 { animation-delay: 0.2s; }\n  .fade-in-delay-3 { animation-delay: 0.3s; }\n\n  @keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n  }\n\n  @keyframes fadeInUp {\n    from { opacity: 0; transform: translateY(30px); }\n    to { opacity: 1; transform: translateY(0); }\n  }\n\n  /* Pulse animation */\n  .pulse-soft {\n    animation: pulseSoft 2s ease-in-out infinite;\n  }\n\n  @keyframes pulseSoft {\n    0%, 100% { transform: scale(1); }\n    50% { transform: scale(1.05); }\n  }\n}\n\n:root {\n  /* Modern Color System - Light Mode */\n  --background: 0 0% 99%;\n  --foreground: 224 9% 9%;\n  --card: 0 0% 100%;\n  --card-foreground: 224 9% 9%;\n  --popover: 0 0% 100%;\n  --popover-foreground: 224 9% 9%;\n  --primary: 262 83% 58%;  /* Modern purple-blue */\n  --primary-foreground: 0 0% 98%;\n  --secondary: 220 14% 96%;\n  --secondary-foreground: 224 9% 9%;\n  --muted: 220 13% 95%;\n  --muted-foreground: 220 9% 46%;\n  --accent: 220 13% 95%;\n  --accent-foreground: 224 9% 9%;\n  --destructive: 0 72% 51%;\n  --destructive-foreground: 0 0% 98%;\n  --border: 220 13% 91%;\n  --input: 220 13% 91%;\n  --ring: 262 83% 58%;\n  --radius: 0.75rem;\n  --success: 142 69% 58%;\n  --warning: 38 92% 50%;\n  --info: 199 89% 48%;\n  \n  /* Modern shadows */\n  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n  --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);\n  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);\n  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n  --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);\n}\n\n.dark {\n  /* Modern Color System - Dark Mode */\n  --background: 224 71% 4%;\n  --foreground: 213 31% 91%;\n  --card: 224 71% 4%;\n  --card-foreground: 213 31% 91%;\n  --popover: 224 71% 4%;\n  --popover-foreground: 213 31% 91%;\n  --primary: 263 70% 50%;\n  --primary-foreground: 213 31% 91%;\n  --secondary: 215 28% 17%;\n  --secondary-foreground: 213 31% 91%;\n  --muted: 215 28% 17%;\n  --muted-foreground: 217 11% 65%;\n  --accent: 215 28% 17%;\n  --accent-foreground: 213 31% 91%;\n  --destructive: 0 63% 31%;\n  --destructive-foreground: 213 31% 91%;\n  --border: 215 28% 17%;\n  --input: 215 28% 17%;\n  --ring: 263 70% 50%;\n  --success: 142 69% 58%;\n  --warning: 38 92% 50%;\n  --info: 199 89% 48%;\n  \n  /* Dark mode shadows */\n  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.3);\n  --shadow: 0 1px 3px 0 rgb(0 0 0 / 0.4), 0 1px 2px -1px rgb(0 0 0 / 0.4);\n  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.4), 0 2px 4px -2px rgb(0 0 0 / 0.4);\n  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.4), 0 4px 6px -4px rgb(0 0 0 / 0.4);\n  --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.4), 0 8px 10px -6px rgb(0 0 0 / 0.4);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n    transition: background-color 0.3s cubic-bezier(0.4, 0, 0.2, 1), \n               border-color 0.3s cubic-bezier(0.4, 0, 0.2, 1),\n               color 0.3s cubic-bezier(0.4, 0, 0.2, 1),\n               fill 0.3s cubic-bezier(0.4, 0, 0.2, 1),\n               stroke 0.3s cubic-bezier(0.4, 0, 0.2, 1),\n               opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1),\n               box-shadow 0.3s cubic-bezier(0.4, 0, 0.2, 1),\n               transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  html {\n    color-scheme: light dark;\n  }\n\n  body {\n    @apply font-body antialiased bg-background text-foreground;\n    min-height: 100vh;\n    font-feature-settings: 'cv11', 'ss01';\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-display;\n    font-feature-settings: 'cv11', 'ss01';\n  }\n\n  /* Modern scrollbar */\n  ::-webkit-scrollbar {\n    width: 6px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: hsl(var(--muted));\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: hsl(var(--primary) / 0.5);\n    border-radius: 3px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: hsl(var(--primary) / 0.8);\n  }\n\n  /* Selection styling */\n  ::selection {\n    background: hsl(var(--primary) / 0.2);\n    color: hsl(var(--foreground));\n  }\n}","size_bytes":7973},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport './lib/buffer-polyfill';\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":189},"client/src/components/content-section.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface MediaItem {\n  id: string;\n  type: 'image' | 'video';\n  url: string;\n  title: string;\n  description: string;\n}\n\ninterface ContentSectionProps {\n  onContentChange?: (content: ContentSectionData) => void;\n}\n\nexport interface ContentSectionData {\n  title: string;\n  description: string;\n  mediaItems: MediaItem[];\n}\n\nexport default function ContentSection({ onContentChange }: ContentSectionProps) {\n  const { toast } = useToast();\n  const [content, setContent] = useState<ContentSectionData>({\n    title: \"\",\n    description: \"\",\n    mediaItems: []\n  });\n  \n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleContentUpdate = (field: keyof ContentSectionData, value: any) => {\n    const updatedContent = { ...content, [field]: value };\n    setContent(updatedContent);\n    onContentChange?.(updatedContent);\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (!files) return;\n\n    Array.from(files).forEach((file) => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const result = e.target?.result as string;\n        const mediaType = file.type.startsWith('video/') ? 'video' : 'image';\n        \n        const newMediaItem: MediaItem = {\n          id: `media-${Date.now()}-${Math.random()}`,\n          type: mediaType,\n          url: result,\n          title: file.name,\n          description: `${mediaType} uploaded on ${new Date().toLocaleDateString()}`\n        };\n\n        const updatedMediaItems = [...content.mediaItems, newMediaItem];\n        handleContentUpdate('mediaItems', updatedMediaItems);\n        \n        toast({\n          title: \"Media uploaded successfully\",\n          description: `${file.name} has been added to your content section.`,\n        });\n      };\n      reader.readAsDataURL(file);\n    });\n  };\n\n  const removeMediaItem = (id: string) => {\n    const updatedMediaItems = content.mediaItems.filter(item => item.id !== id);\n    handleContentUpdate('mediaItems', updatedMediaItems);\n    \n    toast({\n      title: \"Media removed\",\n      description: \"Media item has been removed from your content section.\",\n    });\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <i className=\"fas fa-photo-video text-primary\"></i>\n          Content & Media Section\n        </CardTitle>\n        <p className=\"text-sm text-gray-600\">\n          Add images, videos, and rich content to enhance your invoice presentation\n        </p>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Title & Description */}\n        <div className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"content-title\">Content Title</Label>\n            <Input\n              id=\"content-title\"\n              value={content.title}\n              onChange={(e) => handleContentUpdate('title', e.target.value)}\n              placeholder=\"e.g., Project Gallery, Work Samples, etc.\"\n              className=\"mt-1\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"content-description\">Description</Label>\n            <Textarea\n              id=\"content-description\"\n              value={content.description}\n              onChange={(e) => handleContentUpdate('description', e.target.value)}\n              placeholder=\"Describe what this content represents...\"\n              rows={3}\n              className=\"mt-1\"\n            />\n          </div>\n        </div>\n\n        {/* Media Upload */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <Label>Media Files</Label>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => fileInputRef.current?.click()}\n              className=\"flex items-center gap-2\"\n            >\n              <i className=\"fas fa-cloud-upload-alt\"></i>\n              Upload Media\n            </Button>\n          </div>\n          \n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            multiple\n            accept=\"image/*,video/*\"\n            onChange={handleFileUpload}\n            className=\"hidden\"\n          />\n          \n          {/* Media Grid */}\n          {content.mediaItems.length > 0 && (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {content.mediaItems.map((item) => (\n                <div key={item.id} className=\"relative group\">\n                  <Card className=\"overflow-hidden\">\n                    <CardContent className=\"p-0\">\n                      {item.type === 'image' ? (\n                        <img\n                          src={item.url}\n                          alt={item.title}\n                          className=\"w-full h-32 object-cover\"\n                        />\n                      ) : (\n                        <video\n                          src={item.url}\n                          className=\"w-full h-32 object-cover\"\n                          controls\n                        />\n                      )}\n                      <div className=\"p-3\">\n                        <h4 className=\"text-sm font-medium truncate\">{item.title}</h4>\n                        <p className=\"text-xs text-gray-500 truncate\">{item.description}</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Button\n                    type=\"button\"\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity w-6 h-6 p-0\"\n                    onClick={() => removeMediaItem(item.id)}\n                  >\n                    <i className=\"fas fa-times text-xs\"></i>\n                  </Button>\n                </div>\n              ))}\n            </div>\n          )}\n          \n          {content.mediaItems.length === 0 && (\n            <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center\">\n              <i className=\"fas fa-photo-video text-3xl text-gray-400 mb-3\"></i>\n              <p className=\"text-gray-500 mb-2\">No media files uploaded yet</p>\n              <p className=\"text-sm text-gray-400\">\n                Support for images and videos (JPEG, PNG, MP4, etc.)\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* Content Preview */}\n        {(content.title || content.description || content.mediaItems.length > 0) && (\n          <div className=\"border-t pt-4\">\n            <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Preview</h4>\n            <div className=\"bg-gray-50 rounded-lg p-4\">\n              {content.title && (\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{content.title}</h3>\n              )}\n              {content.description && (\n                <p className=\"text-gray-600 mb-3\">{content.description}</p>\n              )}\n              <p className=\"text-xs text-gray-500\">\n                {content.mediaItems.length} media item{content.mediaItems.length !== 1 ? 's' : ''} attached\n              </p>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7642},"client/src/components/email-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { EmailFormData } from \"@/types/invoice\";\n\ninterface EmailModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  invoiceId: string;\n  invoiceNumber: string;\n  companyName: string;\n  clientEmail?: string;\n}\n\nexport default function EmailModal({\n  isOpen,\n  onClose,\n  invoiceId,\n  invoiceNumber,\n  companyName,\n  clientEmail,\n}: EmailModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [formData, setFormData] = useState<EmailFormData>({\n    to: clientEmail || \"\",\n    subject: `Invoice ${invoiceNumber} from ${companyName}`,\n    message: `Dear Client,\\n\\nPlease find attached your invoice.\\n\\nThank you for your business!\\n\\nBest regards,\\n${companyName}`,\n    attachPDF: true,\n  });\n\n  const sendEmailMutation = useMutation({\n    mutationFn: async (data: EmailFormData) => {\n      const response = await apiRequest(\"POST\", `/api/invoices/${invoiceId}/send-email`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Email sent successfully!\",\n        description: \"The invoice has been sent to the recipient.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      onClose();\n      setFormData({\n        to: clientEmail || \"\",\n        subject: `Invoice ${invoiceNumber} from ${companyName}`,\n        message: `Dear Client,\\n\\nPlease find attached your invoice.\\n\\nThank you for your business!\\n\\nBest regards,\\n${companyName}`,\n        attachPDF: true,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to send email\",\n        description: error.message || \"An error occurred while sending the email.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.to.trim()) {\n      toast({\n        title: \"Email required\",\n        description: \"Please enter a recipient email address.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    sendEmailMutation.mutate(formData);\n  };\n\n  const handleChange = (field: keyof EmailFormData, value: string | boolean) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md w-[95vw] max-h-[90vh] overflow-y-auto mx-4 bg-white dark:bg-gray-900 rounded-xl shadow-2xl border-0 sm:border fixed left-1/2 top-1/2 translate-x-[-50%] translate-y-[-50%] z-[9999]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center text-base sm:text-lg\">\n            <i className=\"fas fa-envelope mr-2 text-primary\"></i>\n            Send Invoice\n          </DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"to\" className=\"text-sm font-medium text-gray-700\">\n              To Email Address *\n            </Label>\n            <Input\n              id=\"to\"\n              type=\"email\"\n              value={formData.to}\n              onChange={(e) => handleChange(\"to\", e.target.value)}\n              placeholder=\"client@example.com\"\n              required\n              className=\"mt-1\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"subject\" className=\"text-sm font-medium text-gray-700\">\n              Subject\n            </Label>\n            <Input\n              id=\"subject\"\n              type=\"text\"\n              value={formData.subject}\n              onChange={(e) => handleChange(\"subject\", e.target.value)}\n              className=\"mt-1\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"message\" className=\"text-sm font-medium text-gray-700\">\n              Message\n            </Label>\n            <Textarea\n              id=\"message\"\n              value={formData.message}\n              onChange={(e) => handleChange(\"message\", e.target.value)}\n              rows={4}\n              className=\"mt-1\"\n              placeholder=\"Enter your message here...\"\n            />\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"attachPDF\"\n              checked={formData.attachPDF}\n              onCheckedChange={(checked) => handleChange(\"attachPDF\", !!checked)}\n            />\n            <Label htmlFor=\"attachPDF\" className=\"text-sm text-gray-700\">\n              Attach PDF invoice\n            </Label>\n          </div>\n          \n          <div className=\"flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              className=\"w-full sm:flex-1 py-3\"\n              disabled={sendEmailMutation.isPending}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"w-full sm:flex-1 bg-primary hover:bg-primary-dark py-3\"\n              disabled={sendEmailMutation.isPending}\n            >\n              {sendEmailMutation.isPending ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  Sending...\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-paper-plane mr-2\"></i>\n                  Send Email\n                </>\n              )}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6055},"client/src/components/footer.tsx":{"content":"import { Link } from \"wouter\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"relative mt-32\">\n      {/* Modern Gradient Background */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 via-background to-accent/10\"></div>\n      \n      <div className=\"relative border-t border-border/50 bg-card/50 backdrop-blur-xl\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-12 lg:gap-16\">\n            {/* Company Info */}\n            <div className=\"space-y-8 fade-in\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <svg className=\"h-8 w-8\" viewBox=\"0 0 64 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <rect x=\"8\" y=\"12\" width=\"48\" height=\"40\" rx=\"4\" fill=\"#10B981\" stroke=\"#ffffff\" strokeWidth=\"2\"/>\n                    <rect x=\"12\" y=\"16\" width=\"40\" height=\"32\" rx=\"2\" fill=\"#ffffff\"/>\n                    <line x1=\"16\" y1=\"22\" x2=\"48\" y2=\"22\" stroke=\"#10B981\" strokeWidth=\"2\"/>\n                    <line x1=\"16\" y1=\"26\" x2=\"40\" y2=\"26\" stroke=\"#10B981\" strokeWidth=\"1\"/>\n                    <line x1=\"16\" y1=\"30\" x2=\"36\" y2=\"30\" stroke=\"#10B981\" strokeWidth=\"1\"/>\n                    <line x1=\"16\" y1=\"34\" x2=\"42\" y2=\"34\" stroke=\"#10B981\" strokeWidth=\"1\"/>\n                    <line x1=\"16\" y1=\"38\" x2=\"32\" y2=\"38\" stroke=\"#10B981\" strokeWidth=\"1\"/>\n                    <rect x=\"38\" y=\"36\" width=\"10\" height=\"6\" rx=\"1\" fill=\"#10B981\"/>\n                    <text x=\"43\" y=\"41\" fill=\"white\" fontSize=\"4\" textAnchor=\"middle\">$</text>\n                  </svg>\n                  <h3 className=\"text-2xl font-display font-bold bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent\">\n                    invoicedetail\n                  </h3>\n                </div>\n                <p className=\"text-muted-foreground text-sm leading-relaxed font-body\">\n                  The most professional and user-friendly invoice management system for modern businesses.\n                </p>\n              </div>\n              <div className=\"flex space-x-4\">\n                {[\n                  { icon: 'fab fa-linkedin', href: 'https://linkedin.com', label: 'LinkedIn' },\n                  { icon: 'fab fa-discord', href: 'https://discord.com', label: 'Discord' },\n                  { icon: 'fab fa-twitter', href: 'https://twitter.com', label: 'Twitter' },\n                  { icon: 'fab fa-facebook', href: 'https://facebook.com', label: 'Facebook' }\n                ].map((social) => (\n                  <a\n                    key={social.label}\n                    href={social.href}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"w-11 h-11 bg-gradient-to-br from-white/20 to-white/5 backdrop-blur-sm border border-white/20 hover:bg-gradient-to-br hover:from-primary/20 hover:to-primary/5 rounded-xl flex items-center justify-center text-muted-foreground hover:text-primary transition-all duration-300 hover:scale-105 shadow-lg hover:shadow-xl relative overflow-hidden group\"\n                    aria-label={social.label}\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent -skew-x-12 translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-700\"></div>\n                    <i className={`${social.icon} relative z-10`}></i>\n                  </a>\n                ))}\n              </div>\n            </div>\n\n            {/* Features */}\n            <div className=\"space-y-6 fade-in fade-in-delay-1\">\n              <h4 className=\"text-lg font-display font-semibold text-foreground border-b border-border/50 pb-3\">Features</h4>\n              <ul className=\"space-y-3\">\n                {[\n                  { label: 'Create Invoices', to: '/create', icon: 'fas fa-plus' },\n                  { label: 'Invoice History', to: '/history', icon: 'fas fa-history' }\n                ].map((item) => (\n                  <li key={item.label}>\n                    <Link \n                      href={item.to}\n                      className=\"flex items-start text-muted-foreground hover:text-foreground transition-all duration-300 group\"\n                      style={{ justifyContent: 'flex-start' }}\n                    >\n                      <i className={`${item.icon} mr-3 group-hover:text-primary transition-colors`}></i>\n                      <span className=\"group-hover:translate-x-1 transition-transform font-body text-left\">{item.label}</span>\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            {/* Support */}\n            <div className=\"space-y-6 fade-in fade-in-delay-2\">\n              <h4 className=\"text-lg font-display font-semibold text-foreground border-b border-border/50 pb-3\">Support</h4>\n              <ul className=\"space-y-3\">\n                {[\n                  { label: 'Contact Us', to: '/contact' },\n                  { label: 'About Us', to: '/about' },\n                  { label: 'Help Center', href: 'mailto:support@invoicepro.com' }\n                ].map((item) => (\n                  <li key={item.label}>\n                    {item.to ? (\n                      <Link \n                        href={item.to}\n                        className=\"flex items-start text-muted-foreground hover:text-foreground transition-all duration-300 group\"\n                        style={{ justifyContent: 'flex-start' }}\n                      >\n                        <i className=\"fas fa-arrow-right mr-3 group-hover:text-primary transition-colors\"></i>\n                        <span className=\"group-hover:translate-x-1 transition-transform font-body text-left\">{item.label}</span>\n                      </Link>\n                    ) : (\n                      <a \n                        href={item.href}\n                        className=\"flex items-start text-muted-foreground hover:text-foreground transition-all duration-300 group\"\n                        style={{ justifyContent: 'flex-start' }}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        <i className=\"fas fa-arrow-right mr-3 group-hover:text-primary transition-colors\"></i>\n                        <span className=\"group-hover:translate-x-1 transition-transform font-body text-left\">{item.label}</span>\n                      </a>\n                    )}\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            {/* Legal */}\n            <div className=\"space-y-6 fade-in fade-in-delay-3\">\n              <h4 className=\"text-lg font-display font-semibold text-foreground border-b border-border/50 pb-3\">Legal</h4>\n              <ul className=\"space-y-3\">\n                {[\n                  { label: 'Privacy Policy', to: '/privacy' },\n                  { label: 'Terms of Service', to: '/terms' }\n                ].map((item) => (\n                  <li key={item.label}>\n                    <Link \n                      href={item.to}\n                      className=\"flex items-start text-muted-foreground hover:text-foreground transition-all duration-300 group\"\n                      style={{ justifyContent: 'flex-start' }}\n                    >\n                      <i className=\"fas fa-arrow-right mr-3 group-hover:text-primary transition-colors\"></i>\n                      <span className=\"group-hover:translate-x-1 transition-transform font-body text-left\">{item.label}</span>\n                    </Link>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n\n          {/* Bottom Section */}\n          <div className=\"border-t border-border/50 mt-16 pt-8\">\n            <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center space-y-4 md:space-y-0\">\n              <div className=\"text-muted-foreground text-sm font-body text-left\">\n                © {new Date().getFullYear()} Invoice Pro. All rights reserved. Built with ❤️ for modern businesses.\n              </div>\n              <div className=\"flex items-center space-x-6 text-sm\">\n                <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                  <span className=\"font-body\">All systems operational</span>\n                </div>\n                <a href=\"#\" className=\"text-muted-foreground hover:text-foreground transition-colors font-body\">\n                  Version 2.0.1\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":8851},"client/src/components/google-ads.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface GoogleAdsProps {\n  adSlot?: string;\n  adFormat?: 'horizontal' | 'vertical' | 'square';\n  className?: string;\n}\n\nexport default function GoogleAds({ \n  adSlot = \"demo-ad-slot\", \n  adFormat = \"horizontal\",\n  className = \"\" \n}: GoogleAdsProps) {\n  const [adLoaded, setAdLoaded] = useState(false);\n  const [showDemo, setShowDemo] = useState(true);\n\n  useEffect(() => {\n    // Simulate ad loading\n    const timer = setTimeout(() => {\n      setAdLoaded(true);\n    }, 2000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  const getDemoAdContent = () => {\n    const ads = [\n      {\n        title: \"Professional Templates\",\n        description: \"Create stunning invoices with our premium templates\",\n        cta: \"Upgrade Now\",\n        color: \"bg-blue-500\"\n      },\n      {\n        title: \"Invoice Analytics\",\n        description: \"Track payments and client insights with our dashboard\",\n        cta: \"Learn More\", \n        color: \"bg-green-500\"\n      },\n      {\n        title: \"Auto Payment Reminders\",\n        description: \"Never miss a payment with automated follow-ups\",\n        cta: \"Try Free\",\n        color: \"bg-purple-500\"\n      },\n      {\n        title: \"Multi-Currency Support\",\n        description: \"Invoice globally with 50+ currencies supported\",\n        cta: \"Explore\",\n        color: \"bg-orange-500\"\n      }\n    ];\n\n    return ads[Math.floor(Math.random() * ads.length)];\n  };\n\n  const demoAd = getDemoAdContent();\n\n  const getAdDimensions = () => {\n    switch (adFormat) {\n      case 'vertical':\n        return 'w-full h-96';\n      case 'square':\n        return 'w-full aspect-square';\n      case 'horizontal':\n      default:\n        return 'w-full h-24';\n    }\n  };\n\n  if (showDemo) {\n    return (\n      <Card className={`${className} overflow-hidden`}>\n        <CardContent className=\"p-0\">\n          <div className={`${getAdDimensions()} ${demoAd.color} text-white relative`}>\n            <div className=\"absolute inset-0 bg-gradient-to-r from-black/20 to-transparent\"></div>\n            <div className=\"relative h-full flex flex-col justify-center p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-xs bg-white/20 px-2 py-1 rounded\">Advertisement</span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-white/70 hover:text-white p-1 h-auto\"\n                  onClick={() => setShowDemo(false)}\n                >\n                  <i className=\"fas fa-times text-xs\"></i>\n                </Button>\n              </div>\n              \n              <h3 className=\"text-lg font-bold mb-1\">{demoAd.title}</h3>\n              <p className=\"text-sm text-white/90 mb-3\">{demoAd.description}</p>\n              \n              <Button \n                size=\"sm\" \n                variant=\"secondary\" \n                className=\"self-start bg-white text-gray-900 hover:bg-gray-100\"\n              >\n                {demoAd.cta}\n              </Button>\n            </div>\n            \n            <div className=\"absolute bottom-1 right-1\">\n              <span className=\"text-xs text-white/60\">Sponsored</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={`${className} overflow-hidden`}>\n      <CardContent className=\"p-4\">\n        <div className={`${getAdDimensions()} border-2 border-dashed border-gray-300 rounded flex items-center justify-center bg-gray-50`}>\n          {!adLoaded ? (\n            <div className=\"text-center\">\n              <i className=\"fas fa-spinner fa-spin text-2xl text-gray-400 mb-2\"></i>\n              <p className=\"text-sm text-gray-500\">Loading advertisement...</p>\n            </div>\n          ) : (\n            <div className=\"text-center\">\n              <i className=\"fas fa-ad text-2xl text-gray-400 mb-2\"></i>\n              <p className=\"text-sm text-gray-500\">Google Ads Placeholder</p>\n              <p className=\"text-xs text-gray-400 mt-1\">Ad Slot: {adSlot}</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Google Ads Integration Component\nexport function GoogleAdsScript() {\n  useEffect(() => {\n    // Add Google AdSense script to document head only once\n    const scriptId = 'google-adsense-script';\n    if (!document.getElementById(scriptId)) {\n      const script = document.createElement('script');\n      script.id = scriptId;\n      script.async = true;\n      script.src = 'https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-demo';\n      script.crossOrigin = 'anonymous';\n      document.head.appendChild(script);\n\n      // Initialize ads after a delay\n      setTimeout(() => {\n        try {\n          ((window as any).adsbygoogle = (window as any).adsbygoogle || []).push({});\n        } catch (e) {\n          console.log('AdSense initialization delayed');\n        }\n      }, 1000);\n    }\n  }, []);\n\n  return null;\n}\n\n// Responsive Google Ad Component\nexport function ResponsiveGoogleAd({ \n  adSlot, \n  className = \"\",\n  adFormat = \"auto\" \n}: {\n  adSlot: string;\n  className?: string;\n  adFormat?: string;\n}) {\n  return (\n    <div className={`google-ad-container ${className}`}>\n      <ins\n        className=\"adsbygoogle\"\n        style={{ display: 'block' }}\n        data-ad-client=\"ca-pub-XXXXXXXXXX\"\n        data-ad-slot={adSlot}\n        data-ad-format={adFormat}\n        data-full-width-responsive=\"true\"\n      />\n    </div>\n  );\n}","size_bytes":5644},"client/src/components/invoice-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { InvoiceWithLineItems } from \"@shared/schema\";\n\ninterface InvoiceCardProps {\n  invoice: InvoiceWithLineItems;\n  onView: (invoice: InvoiceWithLineItems) => void;\n  onEdit: (invoice: InvoiceWithLineItems) => void;\n  onDelete: (invoice: InvoiceWithLineItems) => void;\n}\n\nexport default function InvoiceCard({ invoice, onView, onEdit, onDelete }: InvoiceCardProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"paid\":\n        return \"bg-green-100 text-green-800\";\n      case \"sent\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"overdue\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex justify-between items-start mb-4\">\n          <div>\n            <h3 className=\"font-semibold text-lg text-gray-900\">\n              #{invoice.invoiceNumber}\n            </h3>\n            <p className=\"text-sm text-gray-600\">{invoice.clientName}</p>\n          </div>\n          <Badge className={`text-xs font-medium px-2.5 py-0.5 rounded-full ${getStatusColor(invoice.status)}`}>\n            {invoice.status.charAt(0).toUpperCase() + invoice.status.slice(1)}\n          </Badge>\n        </div>\n        \n        <div className=\"space-y-2 mb-4\">\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-gray-600\">Date:</span>\n            <span className=\"font-medium\">{formatDate(invoice.invoiceDate)}</span>\n          </div>\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-gray-600\">Amount:</span>\n            <span className=\"font-bold text-primary\">${invoice.total}</span>\n          </div>\n          {invoice.dueDate && (\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-600\">Due:</span>\n              <span className=\"font-medium\">{formatDate(invoice.dueDate)}</span>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => onView(invoice)}\n            className=\"flex-1\"\n          >\n            <i className=\"fas fa-eye mr-1\"></i>View\n          </Button>\n          <Button\n            size=\"sm\"\n            onClick={() => onEdit(invoice)}\n            className=\"flex-1 bg-primary hover:bg-primary-dark\"\n          >\n            <i className=\"fas fa-edit mr-1\"></i>Edit\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => onDelete(invoice)}\n            className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n          >\n            <i className=\"fas fa-trash\"></i>\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3253},"client/src/components/invoice-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Palette } from \"lucide-react\";\nimport LogoUpload from \"./logo-upload\";\nimport ContentSection, { type ContentSectionData } from \"./content-section\";\nimport { INVOICE_TEMPLATES, CURRENCIES, FONT_FAMILIES, DOCUMENT_TYPES, getTemplateById } from \"@/lib/invoice-templates\";\nimport type { InvoiceFormData, LineItemFormData } from \"@/types/invoice\";\n\ninterface InvoiceFormProps {\n  formData: InvoiceFormData;\n  lineItems: LineItemFormData[];\n  onFormChange: (field: keyof InvoiceFormData, value: any) => void;\n  onLineItemsChange: (items: LineItemFormData[]) => void;\n}\n\ninterface ExtendedInvoiceFormData extends InvoiceFormData {\n  contentSection?: ContentSectionData;\n}\n\nexport default function InvoiceForm({\n  formData,\n  lineItems,\n  onFormChange,\n  onLineItemsChange,\n}: InvoiceFormProps) {\n  const [contentSection, setContentSection] = useState<ContentSectionData>({\n    title: \"\",\n    description: \"\",\n    mediaItems: []\n  });\n\n  const handleContentChange = (content: ContentSectionData) => {\n    setContentSection(content);\n    // Store in localStorage for persistence\n    localStorage.setItem('invoice-content-section', JSON.stringify(content));\n  };\n\n  // Load content section from localStorage on mount\n  useEffect(() => {\n    const savedContent = localStorage.getItem('invoice-content-section');\n    if (savedContent) {\n      try {\n        setContentSection(JSON.parse(savedContent));\n      } catch (e) {\n        console.error('Failed to parse saved content section');\n      }\n    }\n  }, []);\n  \n  const handleLineItemChange = (index: number, field: keyof LineItemFormData, value: string | number) => {\n    const updatedItems = [...lineItems];\n    updatedItems[index] = { ...updatedItems[index], [field]: value };\n    \n    // Calculate amount when rate or quantity changes\n    if (field === 'rate' || field === 'quantity') {\n      const rate = field === 'rate' ? parseFloat(value.toString()) : parseFloat(updatedItems[index].rate);\n      const quantity = field === 'quantity' ? Number(value) : updatedItems[index].quantity;\n      updatedItems[index].amount = ((rate || 0) * (quantity || 0)).toFixed(2);\n    }\n    \n    onLineItemsChange(updatedItems);\n  };\n\n  const addLineItem = () => {\n    onLineItemsChange([\n      ...lineItems,\n      { description: \"\", quantity: 1, rate: \"0.00\", amount: \"0.00\" }\n    ]);\n  };\n\n  const removeLineItem = (index: number) => {\n    const updatedItems = lineItems.filter((_, i) => i !== index);\n    onLineItemsChange(updatedItems);\n  };\n\n  // Initialize with one line item if empty\n  useEffect(() => {\n    if (lineItems.length === 0) {\n      addLineItem();\n    }\n  }, []);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Company Information */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Company Information</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"md:col-span-2\">\n              <LogoUpload\n                onLogoChange={(logo) => onFormChange(\"companyLogo\", logo)}\n                currentLogo={formData.companyLogo}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"companyName\">Company Name *</Label>\n              <Input\n                id=\"companyName\"\n                value={formData.companyName}\n                onChange={(e) => onFormChange(\"companyName\", e.target.value)}\n                placeholder=\"Acme Corporation\"\n                className=\"mt-1\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"companyEmail\">Email Address *</Label>\n              <Input\n                id=\"companyEmail\"\n                type=\"email\"\n                value={formData.companyEmail}\n                onChange={(e) => onFormChange(\"companyEmail\", e.target.value)}\n                placeholder=\"hello@acmecorp.com\"\n                className=\"mt-1\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"companyPhone\">Phone Number</Label>\n              <Input\n                id=\"companyPhone\"\n                type=\"tel\"\n                value={formData.companyPhone}\n                onChange={(e) => onFormChange(\"companyPhone\", e.target.value)}\n                placeholder=\"+1 (555) 123-4567\"\n                className=\"mt-1\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"companyWebsite\">Website</Label>\n              <Input\n                id=\"companyWebsite\"\n                type=\"url\"\n                value={formData.companyWebsite}\n                onChange={(e) => onFormChange(\"companyWebsite\", e.target.value)}\n                placeholder=\"www.acmecorp.com\"\n                className=\"mt-1\"\n              />\n            </div>\n            <div className=\"md:col-span-2\">\n              <Label htmlFor=\"companyAddress\">Address</Label>\n              <Textarea\n                id=\"companyAddress\"\n                value={formData.companyAddress}\n                onChange={(e) => onFormChange(\"companyAddress\", e.target.value)}\n                rows={3}\n                placeholder=\"123 Business St, Suite 100&#10;New York, NY 10001\"\n                className=\"mt-1\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Client Information */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Bill To</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"clientName\">Client Name *</Label>\n              <Input\n                id=\"clientName\"\n                value={formData.clientName}\n                onChange={(e) => onFormChange(\"clientName\", e.target.value)}\n                placeholder=\"John Smith\"\n                className=\"mt-1\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"clientEmail\">Client Email *</Label>\n              <Input\n                id=\"clientEmail\"\n                type=\"email\"\n                value={formData.clientEmail}\n                onChange={(e) => onFormChange(\"clientEmail\", e.target.value)}\n                placeholder=\"john@example.com\"\n                className=\"mt-1\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"clientCompany\">Company</Label>\n              <Input\n                id=\"clientCompany\"\n                value={formData.clientCompany}\n                onChange={(e) => onFormChange(\"clientCompany\", e.target.value)}\n                placeholder=\"Client Company Inc\"\n                className=\"mt-1\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"clientPhone\">Phone</Label>\n              <Input\n                id=\"clientPhone\"\n                type=\"tel\"\n                value={formData.clientPhone}\n                onChange={(e) => onFormChange(\"clientPhone\", e.target.value)}\n                placeholder=\"+1 (555) 987-6543\"\n                className=\"mt-1\"\n              />\n            </div>\n            <div className=\"md:col-span-2\">\n              <Label htmlFor=\"clientAddress\">Billing Address</Label>\n              <Textarea\n                id=\"clientAddress\"\n                value={formData.clientAddress}\n                onChange={(e) => onFormChange(\"clientAddress\", e.target.value)}\n                rows={3}\n                placeholder=\"456 Client Ave&#10;Los Angeles, CA 90210\"\n                className=\"mt-1\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Invoice Details */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Invoice Details</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"invoiceNumber\">Invoice Number *</Label>\n              <Input\n                id=\"invoiceNumber\"\n                value={formData.invoiceNumber}\n                onChange={(e) => onFormChange(\"invoiceNumber\", e.target.value)}\n                placeholder=\"INV-001\"\n                className=\"mt-1\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"invoiceDate\">Invoice Date *</Label>\n              <Input\n                id=\"invoiceDate\"\n                type=\"date\"\n                value={formData.invoiceDate}\n                onChange={(e) => onFormChange(\"invoiceDate\", e.target.value)}\n                className=\"mt-1\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"dueDate\">Due Date</Label>\n              <Input\n                id=\"dueDate\"\n                type=\"date\"\n                value={formData.dueDate}\n                onChange={(e) => onFormChange(\"dueDate\", e.target.value)}\n                className=\"mt-1\"\n              />\n            </div>\n          </div>\n          <div className=\"mt-4\">\n            <Label htmlFor=\"notes\">Notes</Label>\n            <Textarea\n              id=\"notes\"\n              value={formData.notes}\n              onChange={(e) => onFormChange(\"notes\", e.target.value)}\n              rows={3}\n              placeholder=\"Thank you for your business!\"\n              className=\"mt-1\"\n            />\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mt-4\">\n            <div>\n              <Label htmlFor=\"documentType\">Document Type</Label>\n              <Select value={formData.documentType} onValueChange={(value) => onFormChange(\"documentType\", value)}>\n                <SelectTrigger className=\"mt-1\">\n                  <SelectValue placeholder=\"Select type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {DOCUMENT_TYPES.map((type) => (\n                    <SelectItem key={type.value} value={type.value}>\n                      {type.icon} {type.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"currency\">Currency</Label>\n              <Select value={formData.currency} onValueChange={(value) => onFormChange(\"currency\", value)}>\n                <SelectTrigger className=\"mt-1\">\n                  <SelectValue placeholder=\"Select currency\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {CURRENCIES.map((currency) => (\n                    <SelectItem key={currency.code} value={currency.code}>\n                      {currency.symbol} {currency.code} - {currency.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"taxPercentage\">Tax Percentage (%)</Label>\n              <Input\n                id=\"taxPercentage\"\n                type=\"number\"\n                min=\"0\"\n                max=\"100\"\n                step=\"0.01\"\n                value={formData.taxPercentage}\n                onChange={(e) => onFormChange(\"taxPercentage\", e.target.value)}\n                placeholder=\"8.25\"\n                className=\"mt-1\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"shippingCost\">Shipping Cost</Label>\n              <Input\n                id=\"shippingCost\"\n                type=\"number\"\n                min=\"0\"\n                step=\"0.01\"\n                value={formData.shippingCost}\n                onChange={(e) => onFormChange(\"shippingCost\", e.target.value)}\n                placeholder=\"15.00\"\n                className=\"mt-1\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Template & Design */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Palette className=\"h-5 w-5\" />\n            Template & Design\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"template\">Invoice Template</Label>\n            <Select value={formData.template} onValueChange={(value) => {\n              const template = getTemplateById(value);\n              onFormChange(\"template\", value);\n              onFormChange(\"primaryColor\", template.primaryColor);\n              onFormChange(\"secondaryColor\", template.secondaryColor);\n              onFormChange(\"fontFamily\", template.fontFamily);\n            }}>\n              <SelectTrigger className=\"mt-1\">\n                <SelectValue placeholder=\"Select template\" />\n              </SelectTrigger>\n              <SelectContent>\n                {INVOICE_TEMPLATES.map((template) => (\n                  <SelectItem key={template.id} value={template.id}>\n                    {template.preview} {template.name} - {template.description}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"primaryColor\">Primary Color</Label>\n              <div className=\"flex gap-2 mt-1\">\n                <Input\n                  id=\"primaryColor\"\n                  type=\"color\"\n                  value={formData.primaryColor}\n                  onChange={(e) => onFormChange(\"primaryColor\", e.target.value)}\n                  className=\"w-12 h-10 p-1 border-2\"\n                />\n                <Input\n                  type=\"text\"\n                  value={formData.primaryColor}\n                  onChange={(e) => onFormChange(\"primaryColor\", e.target.value)}\n                  placeholder=\"#2563eb\"\n                  className=\"flex-1\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"secondaryColor\">Secondary Color</Label>\n              <div className=\"flex gap-2 mt-1\">\n                <Input\n                  id=\"secondaryColor\"\n                  type=\"color\"\n                  value={formData.secondaryColor}\n                  onChange={(e) => onFormChange(\"secondaryColor\", e.target.value)}\n                  className=\"w-12 h-10 p-1 border-2\"\n                />\n                <Input\n                  type=\"text\"\n                  value={formData.secondaryColor}\n                  onChange={(e) => onFormChange(\"secondaryColor\", e.target.value)}\n                  placeholder=\"#64748b\"\n                  className=\"flex-1\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"fontFamily\">Font Family</Label>\n              <Select value={formData.fontFamily} onValueChange={(value) => onFormChange(\"fontFamily\", value)}>\n                <SelectTrigger className=\"mt-1\">\n                  <SelectValue placeholder=\"Select font\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {FONT_FAMILIES.map((font) => (\n                    <SelectItem key={font.value} value={font.value}>\n                      {font.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Line Items */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Line Items</h3>\n            <Button\n              type=\"button\"\n              onClick={addLineItem}\n              className=\"bg-primary hover:bg-primary-dark\"\n            >\n              <i className=\"fas fa-plus mr-2\"></i>Add Item\n            </Button>\n          </div>\n          \n          {/* Desktop Table View */}\n          <div className=\"hidden md:block overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-gray-200\">\n                  <th className=\"text-left py-3 px-2 font-medium text-gray-700\">Description</th>\n                  <th className=\"text-center py-3 px-2 font-medium text-gray-700 w-20\">Qty</th>\n                  <th className=\"text-right py-3 px-2 font-medium text-gray-700 w-24\">Rate</th>\n                  <th className=\"text-right py-3 px-2 font-medium text-gray-700 w-24\">Amount</th>\n                  <th className=\"w-12\"></th>\n                </tr>\n              </thead>\n              <tbody>\n                {lineItems.map((item, index) => (\n                  <tr key={index} className=\"border-b border-gray-100\">\n                    <td className=\"py-3 px-2\">\n                      <Input\n                        value={item.description}\n                        onChange={(e) => handleLineItemChange(index, \"description\", e.target.value)}\n                        placeholder=\"Service description\"\n                        className=\"border-gray-300\"\n                      />\n                    </td>\n                    <td className=\"py-3 px-2\">\n                      <Input\n                        type=\"number\"\n                        min=\"1\"\n                        value={item.quantity}\n                        onChange={(e) => handleLineItemChange(index, \"quantity\", parseInt(e.target.value) || 1)}\n                        className=\"text-center border-gray-300\"\n                      />\n                    </td>\n                    <td className=\"py-3 px-2\">\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        value={item.rate}\n                        onChange={(e) => handleLineItemChange(index, \"rate\", e.target.value)}\n                        className=\"text-right border-gray-300\"\n                      />\n                    </td>\n                    <td className=\"py-3 px-2 text-right font-medium\">\n                      ${item.amount}\n                    </td>\n                    <td className=\"py-3 px-2 text-center\">\n                      {lineItems.length > 1 && (\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeLineItem(index)}\n                          className=\"text-red-500 hover:text-red-700 hover:bg-red-50\"\n                        >\n                          <i className=\"fas fa-trash-alt\"></i>\n                        </Button>\n                      )}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          {/* Mobile Vertical Layout */}\n          <div className=\"md:hidden space-y-4\">\n            {lineItems.map((item, index) => (\n              <div key={index} className=\"border border-gray-200 rounded-lg p-4 bg-gray-50\">\n                {/* First row: Service name */}\n                <div className=\"mb-3\">\n                  <Label className=\"text-sm font-medium text-gray-700 mb-1 block\">Service Description</Label>\n                  <Input\n                    value={item.description}\n                    onChange={(e) => handleLineItemChange(index, \"description\", e.target.value)}\n                    placeholder=\"Service description\"\n                    className=\"border-gray-300\"\n                  />\n                </div>\n                \n                {/* Second row: Qty and Rate */}\n                <div className=\"grid grid-cols-2 gap-3 mb-3\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700 mb-1 block\">Quantity</Label>\n                    <Input\n                      type=\"number\"\n                      min=\"1\"\n                      value={item.quantity}\n                      onChange={(e) => handleLineItemChange(index, \"quantity\", parseInt(e.target.value) || 1)}\n                      className=\"text-center border-gray-300\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700 mb-1 block\">Rate</Label>\n                    <Input\n                      type=\"number\"\n                      min=\"0\"\n                      step=\"0.01\"\n                      value={item.rate}\n                      onChange={(e) => handleLineItemChange(index, \"rate\", e.target.value)}\n                      className=\"text-right border-gray-300\"\n                    />\n                  </div>\n                </div>\n                \n                {/* Third row: Amount and Delete button */}\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <span className=\"text-sm font-medium text-gray-700 mr-3\">Amount:</span>\n                    <span className=\"text-lg font-bold text-gray-900\">${item.amount}</span>\n                  </div>\n                  {lineItems.length > 1 && (\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeLineItem(index)}\n                      className=\"text-red-500 hover:text-red-700 hover:bg-red-50 ml-2\"\n                    >\n                      <i className=\"fas fa-trash-alt mr-1\"></i>Delete\n                    </Button>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n","size_bytes":21910},"client/src/components/invoice-preview.tsx":{"content":"import { useMemo, useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { generateQRCode } from \"@/lib/qr-generator\";\nimport { getCurrencySymbol, getTemplateById } from \"@/lib/invoice-templates\";\nimport type { InvoiceFormData, LineItemFormData } from \"@/types/invoice\";\n\ninterface InvoicePreviewProps {\n  formData: InvoiceFormData;\n  lineItems: LineItemFormData[];\n  onFormChange: (field: keyof InvoiceFormData, value: any) => void;\n}\n\nexport default function InvoicePreview({\n  formData,\n  lineItems,\n  onFormChange,\n}: InvoicePreviewProps) {\n  const qrCodeUrl = useMemo(() => {\n    if (formData.isHosted) {\n      // For preview, show a sample URL since we don't have the actual invoice ID yet\n      // Use current window location to get the correct domain\n      const baseUrl = window.location.origin;\n      return `${baseUrl}/view/preview`;\n    }\n    return null;\n  }, [formData.isHosted]);\n\n  const [qrCodeDataURL, setQRCodeDataURL] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (qrCodeUrl) {\n      generateQRCode(qrCodeUrl)\n        .then(setQRCodeDataURL)\n        .catch(console.error);\n    } else {\n      setQRCodeDataURL(null);\n    }\n  }, [qrCodeUrl]);\n\n  const subtotal = lineItems.reduce((sum, item) => {\n    const amount = parseFloat(item.rate || \"0\") * (item.quantity || 0);\n    return sum + amount;\n  }, 0);\n\n  const taxAmount = (subtotal * parseFloat(formData.taxPercentage || \"0\")) / 100;\n  const shippingAmount = parseFloat(formData.shippingCost || \"0\");\n  const total = subtotal + taxAmount + shippingAmount;\n  \n  const template = getTemplateById(formData.template || \"classic\");\n  const currencySymbol = getCurrencySymbol(formData.currency || \"USD\");\n\n  return (\n    <Card className=\"md:rounded-xl\">\n      <CardContent className=\"p-6 md:rounded-xl\" style={{ \n        fontFamily: formData.fontFamily || template.fontFamily,\n        backgroundColor: template.backgroundColor \n      }}>\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4 gap-3\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Invoice Preview</h3>\n          {/* QR Code positioned top-right */}\n          <div className=\"bg-gray-100 p-2 rounded-lg self-start sm:self-auto\">\n            <div className=\"w-12 h-12 sm:w-16 sm:h-16 bg-white border-2 border-dashed border-gray-300 rounded flex items-center justify-center\">\n              {formData.isHosted ? (\n                qrCodeDataURL ? (\n                  <img src={qrCodeDataURL} alt=\"QR Code\" className=\"w-full h-full object-contain\" />\n                ) : (\n                  <div className=\"text-xs text-center text-gray-500\">\n                    <i className=\"fas fa-qrcode text-sm sm:text-lg mb-1\"></i>\n                    <div className=\"text-xs\">QR Code</div>\n                  </div>\n                )\n              ) : (\n                <div className=\"text-xs text-center text-gray-400\">\n                  <i className=\"fas fa-qrcode text-sm sm:text-lg mb-1\"></i>\n                  <div className=\"text-xs\">Enable hosting</div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        \n        {/* Mini Invoice Preview */}\n        <div className=\"border border-gray-200 rounded-lg p-4 bg-gray-50 text-sm\">\n          <div className=\"flex justify-between items-start mb-4\">\n            <div>\n              {formData.companyLogo && (\n                <div className=\"w-12 h-8 bg-gray-300 rounded mb-2\">\n                  <img \n                    src={formData.companyLogo} \n                    alt=\"Company logo\" \n                    className=\"w-full h-full object-contain rounded\"\n                  />\n                </div>\n              )}\n              <p className=\"font-semibold text-gray-800\">\n                {formData.companyName || \"Company Name\"}\n              </p>\n              <p className=\"text-gray-600 text-xs\">\n                {formData.companyEmail || \"email@company.com\"}\n              </p>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"font-semibold text-gray-800\">INVOICE</p>\n              <p className=\"text-xs text-gray-600\">\n                {formData.invoiceNumber || \"#INV-000\"}\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-300 pt-3 mb-3\">\n            <p className=\"font-medium text-gray-700 mb-1\">Bill To:</p>\n            <p className=\"text-gray-600 text-xs\">\n              {formData.clientName || \"Client Name\"}\n            </p>\n          </div>\n          \n          <div className=\"space-y-2 mb-3\">\n            {lineItems.length > 0 ? (\n              lineItems.map((item, index) => (\n                <div key={index} className=\"flex justify-between text-xs\">\n                  <span>{item.description || \"Service\"}</span>\n                  <span>${item.amount || \"0.00\"}</span>\n                </div>\n              ))\n            ) : (\n              <div className=\"flex justify-between text-xs text-gray-400\">\n                <span>No items added</span>\n                <span>$0.00</span>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"border-t border-gray-300 pt-2 space-y-1\">\n            <div className=\"flex justify-between text-xs\">\n              <span>Subtotal:</span>\n              <span>{currencySymbol}{subtotal.toFixed(2)}</span>\n            </div>\n            {parseFloat(formData.taxPercentage || \"0\") > 0 && (\n              <div className=\"flex justify-between text-xs\">\n                <span>Tax ({formData.taxPercentage}%):</span>\n                <span>{currencySymbol}{taxAmount.toFixed(2)}</span>\n              </div>\n            )}\n            {shippingAmount > 0 && (\n              <div className=\"flex justify-between text-xs\">\n                <span>Shipping:</span>\n                <span>{currencySymbol}{shippingAmount.toFixed(2)}</span>\n              </div>\n            )}\n            <div className=\"flex justify-between font-semibold text-sm border-t border-gray-200 pt-1\" style={{ color: formData.primaryColor || template.primaryColor }}>\n              <span>Total:</span>\n              <span>{currencySymbol}{total.toFixed(2)}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Hosting & Security Options */}\n        <div className=\"mt-4 space-y-4 p-3 bg-gray-50 rounded-lg border\">\n          <div className=\"flex items-start space-x-3\">\n            <Checkbox\n              id=\"hostInvoice\"\n              checked={formData.isHosted}\n              onCheckedChange={(checked) => onFormChange(\"isHosted\", !!checked)}\n              className=\"mt-0.5 data-[state=checked]:bg-blue-600 data-[state=checked]:border-blue-600\"\n            />\n            <div className=\"flex-1\">\n              <Label htmlFor=\"hostInvoice\" className=\"text-sm font-medium text-gray-800 cursor-pointer leading-relaxed\">\n                Host online with unique URL\n              </Label>\n              <p className=\"text-xs text-gray-500 mt-1\">Allow clients to view and pay online</p>\n            </div>\n          </div>\n          <div className=\"flex items-start space-x-3\">\n            <Checkbox\n              id=\"passwordProtect\"\n              checked={formData.isPasswordProtected}\n              onCheckedChange={(checked) => onFormChange(\"isPasswordProtected\", !!checked)}\n              className=\"mt-0.5 data-[state=checked]:bg-blue-600 data-[state=checked]:border-blue-600\"\n            />\n            <div className=\"flex-1\">\n              <Label htmlFor=\"passwordProtect\" className=\"text-sm font-medium text-gray-800 cursor-pointer leading-relaxed\">\n                Password protect invoice\n              </Label>\n              <p className=\"text-xs text-gray-500 mt-1\">Require password to view invoice</p>\n            </div>\n          </div>\n          {formData.isPasswordProtected && (\n            <div className=\"ml-7 pt-2\">\n              <Input\n                type=\"password\"\n                placeholder=\"Enter password\"\n                value={formData.password}\n                onChange={(e) => onFormChange(\"password\", e.target.value)}\n                className=\"text-sm w-full\"\n              />\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8442},"client/src/components/logo-upload.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface LogoUploadProps {\n  onLogoChange: (logo: string | null) => void;\n  currentLogo?: string | null;\n}\n\nexport default function LogoUpload({ onLogoChange, currentLogo }: LogoUploadProps) {\n  const [isUploading, setIsUploading] = useState(false);\n  const { toast } = useToast();\n\n  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file type\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please upload an image file (PNG, JPG, SVG)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file size (2MB)\n    if (file.size > 2 * 1024 * 1024) {\n      toast({\n        title: \"File too large\",\n        description: \"Please upload an image smaller than 2MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n\n    try {\n      const formData = new FormData();\n      formData.append('logo', file);\n\n      const response = await fetch('/api/upload-logo', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n\n      const { logo } = await response.json();\n      onLogoChange(logo);\n      \n      toast({\n        title: \"Logo uploaded\",\n        description: \"Your company logo has been uploaded successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to upload logo. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleRemoveLogo = () => {\n    onLogoChange(null);\n    toast({\n      title: \"Logo removed\",\n      description: \"Company logo has been removed\",\n    });\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <label className=\"block text-sm font-medium text-gray-700\">Company Logo</label>\n      \n      {currentLogo ? (\n        <div className=\"space-y-3\">\n          <div className=\"w-32 h-24 border border-gray-300 rounded-lg overflow-hidden bg-gray-50 flex items-center justify-center\">\n            <img \n              src={currentLogo} \n              alt=\"Company logo\" \n              className=\"max-w-full max-h-full object-contain\"\n            />\n          </div>\n          <div className=\"flex space-x-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => document.getElementById('logo-upload')?.click()}\n              disabled={isUploading}\n            >\n              {isUploading ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  Uploading...\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-edit mr-2\"></i>\n                  Change\n                </>\n              )}\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleRemoveLogo}\n              disabled={isUploading}\n            >\n              <i className=\"fas fa-trash mr-2\"></i>\n              Remove\n            </Button>\n          </div>\n        </div>\n      ) : (\n        <div\n          className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors cursor-pointer\"\n          onClick={() => document.getElementById('logo-upload')?.click()}\n        >\n          <i className=\"fas fa-cloud-upload-alt text-3xl text-gray-400 mb-2\"></i>\n          <p className=\"text-gray-600\">\n            Drop your logo here or{\" \"}\n            <span className=\"text-primary font-medium\">browse files</span>\n          </p>\n          <p className=\"text-xs text-gray-500 mt-1\">PNG, JPG, SVG up to 2MB</p>\n        </div>\n      )}\n\n      <input\n        id=\"logo-upload\"\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={handleFileSelect}\n        className=\"hidden\"\n        disabled={isUploading}\n      />\n    </div>\n  );\n}\n","size_bytes":4235},"client/src/components/navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport modernLogo from '../assets/Professional_invoice_management_logo_16aa0397.png';\nimport classicLogo from '../assets/Classic_business_invoice_logo_d1656218.png';\nimport creativeLogo from '../assets/Creative_modern_invoice_logo_8ed122e0.png';\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  \n  // Get theme from localStorage or default to 'classic'\n  const getTheme = () => {\n    if (typeof window !== 'undefined') {\n      return localStorage.getItem('invoice-theme') || 'classic';\n    }\n    return 'classic';\n  };\n  \n  const currentTheme = getTheme();\n  \n  const getLogoForTheme = (theme: string) => {\n    switch (theme) {\n      case 'modern':\n      case 'elegant':\n      case 'minimal':\n        return modernLogo;\n      case 'warm':\n      case 'creative':\n        return creativeLogo;\n      case 'classic':\n      default:\n        return classicLogo;\n    }\n  };\n  \n  const currentLogo = getLogoForTheme(currentTheme);\n\n  const navItems = [\n    { path: \"/create\", label: \"Create Invoice\", icon: \"fas fa-plus\" },\n    { path: \"/history\", label: \"Invoice History\", icon: \"fas fa-history\" },\n  ];\n\n  const isActive = (path: string) => {\n    if (path === \"/create\") {\n      return location === \"/\" || location === \"/create\" || location.startsWith(\"/edit\");\n    }\n    return location === path;\n  };\n\n  return (\n    <header className=\"sticky top-0 z-50 border-b border-border/50 bg-background/80 backdrop-blur-xl supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center py-4 fade-in\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\" className=\"flex items-center space-x-3 hover:opacity-90 transition-all duration-300 group\">\n              <svg className=\"h-11 w-11 transition-transform duration-300 group-hover:scale-105\" viewBox=\"0 0 64 64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <rect x=\"8\" y=\"12\" width=\"48\" height=\"40\" rx=\"4\" fill=\"#10B981\" stroke=\"#ffffff\" strokeWidth=\"2\"/>\n                <rect x=\"12\" y=\"16\" width=\"40\" height=\"32\" rx=\"2\" fill=\"#ffffff\"/>\n                <line x1=\"16\" y1=\"22\" x2=\"48\" y2=\"22\" stroke=\"#10B981\" strokeWidth=\"2\"/>\n                <line x1=\"16\" y1=\"26\" x2=\"40\" y2=\"26\" stroke=\"#10B981\" strokeWidth=\"1\"/>\n                <line x1=\"16\" y1=\"30\" x2=\"36\" y2=\"30\" stroke=\"#10B981\" strokeWidth=\"1\"/>\n                <line x1=\"16\" y1=\"34\" x2=\"42\" y2=\"34\" stroke=\"#10B981\" strokeWidth=\"1\"/>\n                <line x1=\"16\" y1=\"38\" x2=\"32\" y2=\"38\" stroke=\"#10B981\" strokeWidth=\"1\"/>\n                <rect x=\"38\" y=\"36\" width=\"10\" height=\"6\" rx=\"1\" fill=\"#10B981\"/>\n                <text x=\"43\" y=\"41\" fill=\"white\" fontSize=\"4\" textAnchor=\"middle\">$</text>\n              </svg>\n              <div>\n                <h1 className=\"text-2xl font-display font-bold text-foreground\">\n                  invoicedetail\n                </h1>\n                <p className=\"text-xs text-muted-foreground font-medium font-body\">Professional Invoicing</p>\n              </div>\n            </Link>\n          </div>\n          \n          <nav className=\"hidden md:flex items-center space-x-3\">\n            {navItems.map((item, index) => (\n              <Link\n                key={item.path}\n                href={item.path}\n                className={`relative px-5 py-2.5 rounded-xl font-medium transition-all duration-300 font-body group ${\n                  isActive(item.path)\n                    ? \"bg-primary text-primary-foreground shadow-lg\"\n                    : \"text-muted-foreground hover:text-foreground hover:bg-accent/50\"\n                }`}\n              >\n                <i className={`${item.icon} mr-2 transition-transform duration-300 group-hover:scale-110`}></i>\n                {item.label}\n              </Link>\n            ))}\n            \n          </nav>\n          \n          <div className=\"md:hidden flex items-center space-x-2\">\n            <button\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              className=\"p-2 text-muted-foreground hover:text-foreground hover:bg-accent/50 rounded-xl transition-all duration-300\"\n            >\n              <i className={`fas ${isMobileMenuOpen ? 'fa-times' : 'fa-bars'} text-lg`}></i>\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Mobile menu */}\n      {isMobileMenuOpen && (\n        <div className=\"md:hidden border-t border-border/50 fade-in-up\">\n          <div className=\"px-4 py-3 space-y-2 bg-card/50 backdrop-blur-xl\">\n            {navItems.map((item, index) => (\n              <Link\n                key={item.path}\n                href={item.path}\n                onClick={() => setIsMobileMenuOpen(false)}\n                className={`block px-4 py-3 rounded-xl font-medium transition-all duration-300 font-body ${\n                  isActive(item.path)\n                    ? \"bg-primary text-primary-foreground shadow-lg\"\n                    : \"text-muted-foreground hover:text-foreground hover:bg-accent/50\"\n                }`}\n              >\n                <i className={`${item.icon} mr-3`}></i>\n                {item.label}\n              </Link>\n            ))}\n          </div>\n        </div>\n      )}\n    </header>\n  );\n}\n","size_bytes":5426},"client/src/hooks/use-invoice-storage.ts":{"content":"import { useState, useEffect } from 'react';\nimport { InvoiceWithLineItems } from '@shared/schema';\n\nconst STORAGE_KEY = 'invoice-generator-drafts';\n\nexport function useInvoiceStorage() {\n  const [drafts, setDrafts] = useState<InvoiceWithLineItems[]>([]);\n\n  useEffect(() => {\n    const stored = localStorage.getItem(STORAGE_KEY);\n    if (stored) {\n      try {\n        setDrafts(JSON.parse(stored));\n      } catch (error) {\n        console.error('Failed to parse stored drafts:', error);\n      }\n    }\n  }, []);\n\n  const saveDraft = (invoice: InvoiceWithLineItems) => {\n    const updatedDrafts = drafts.filter(d => d.id !== invoice.id);\n    updatedDrafts.push({ ...invoice, status: 'draft' });\n    setDrafts(updatedDrafts);\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedDrafts));\n  };\n\n  const removeDraft = (invoiceId: string) => {\n    const updatedDrafts = drafts.filter(d => d.id !== invoiceId);\n    setDrafts(updatedDrafts);\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(updatedDrafts));\n  };\n\n  const getDraft = (invoiceId: string) => {\n    return drafts.find(d => d.id === invoiceId);\n  };\n\n  return {\n    drafts,\n    saveDraft,\n    removeDraft,\n    getDraft,\n  };\n}\n","size_bytes":1194},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/buffer-polyfill.ts":{"content":"import { Buffer } from 'buffer';\n\n// Make Buffer available globally for PDF generation\nif (typeof window !== 'undefined') {\n  window.Buffer = Buffer;\n  (window as any).global = window;\n}\n\nexport { Buffer };","size_bytes":206},"client/src/lib/invoice-templates.ts":{"content":"export interface InvoiceTemplate {\n  id: string;\n  name: string;\n  description: string;\n  primaryColor: string;\n  secondaryColor: string;\n  accentColor: string;\n  backgroundColor: string;\n  fontFamily: string;\n  preview: string;\n  documentType?: string;\n}\n\nexport const DOCUMENT_TYPES = [\n  { value: \"invoice\", label: \"Invoice\", icon: \"📄\" },\n  { value: \"credit-note\", label: \"Credit Note\", icon: \"🔴\" },\n  { value: \"quote\", label: \"Quote\", icon: \"🟦\" },\n  { value: \"purchase-order\", label: \"Purchase Order\", icon: \"🟪\" }\n];\n\nexport const INVOICE_TEMPLATES: InvoiceTemplate[] = [\n  {\n    id: \"classic\",\n    name: \"Classic Blue\",\n    description: \"Professional blue theme with clean lines\",\n    primaryColor: \"#2563eb\",\n    secondaryColor: \"#64748b\",\n    accentColor: \"#3b82f6\",\n    backgroundColor: \"#f8fafc\",\n    fontFamily: \"Inter\",\n    preview: \"🔵 Professional & Clean\"\n  },\n  {\n    id: \"modern\",\n    name: \"Modern Green\",\n    description: \"Fresh green theme for modern businesses\",\n    primaryColor: \"#059669\",\n    secondaryColor: \"#6b7280\",\n    accentColor: \"#10b981\",\n    backgroundColor: \"#f0fdf4\",\n    fontFamily: \"Inter\",\n    preview: \"🟢 Fresh & Modern\"\n  },\n  {\n    id: \"elegant\",\n    name: \"Elegant Purple\",\n    description: \"Sophisticated purple theme for premium brands\",\n    primaryColor: \"#7c3aed\",\n    secondaryColor: \"#6b7280\",\n    accentColor: \"#8b5cf6\",\n    backgroundColor: \"#faf5ff\",\n    fontFamily: \"Inter\",\n    preview: \"🟣 Elegant & Premium\"\n  },\n  {\n    id: \"warm\",\n    name: \"Warm Orange\",\n    description: \"Friendly orange theme for creative businesses\",\n    primaryColor: \"#ea580c\",\n    secondaryColor: \"#6b7280\",\n    accentColor: \"#f97316\",\n    backgroundColor: \"#fff7ed\",\n    fontFamily: \"Inter\",\n    preview: \"🟠 Warm & Creative\"\n  },\n  {\n    id: \"minimal\",\n    name: \"Minimal Dark\",\n    description: \"Sleek dark theme for tech companies\",\n    primaryColor: \"#1f2937\",\n    secondaryColor: \"#6b7280\",\n    accentColor: \"#374151\",\n    backgroundColor: \"#f9fafb\",\n    fontFamily: \"Inter\",\n    preview: \"⚫ Sleek & Tech\"\n  },\n  {\n    id: \"credit-note\",\n    name: \"Credit Note Red\",\n    description: \"Professional red theme for credit notes and refunds\",\n    primaryColor: \"#dc2626\",\n    secondaryColor: \"#6b7280\",\n    accentColor: \"#ef4444\",\n    backgroundColor: \"#fef2f2\",\n    fontFamily: \"Inter\",\n    preview: \"🔴 Credit & Refunds\"\n  },\n  {\n    id: \"quote\",\n    name: \"Quote Teal\",\n    description: \"Fresh teal theme for quotes and estimates\",\n    primaryColor: \"#0891b2\",\n    secondaryColor: \"#6b7280\",\n    accentColor: \"#06b6d4\",\n    backgroundColor: \"#f0fdfa\",\n    fontFamily: \"Inter\",\n    preview: \"🟦 Quotes & Estimates\"\n  },\n  {\n    id: \"purchase-order\",\n    name: \"Purchase Order Indigo\",\n    description: \"Professional indigo theme for purchase orders\",\n    primaryColor: \"#4f46e5\",\n    secondaryColor: \"#6b7280\",\n    accentColor: \"#6366f1\",\n    backgroundColor: \"#f0f9ff\",\n    fontFamily: \"Inter\",\n    preview: \"🟪 Purchase Orders\"\n  }\n];\n\nexport const CURRENCIES = [\n  { code: \"USD\", symbol: \"$\", name: \"US Dollar\" },\n  { code: \"EUR\", symbol: \"€\", name: \"Euro\" },\n  { code: \"GBP\", symbol: \"£\", name: \"British Pound\" },\n  { code: \"JPY\", symbol: \"¥\", name: \"Japanese Yen\" },\n  { code: \"AUD\", symbol: \"A$\", name: \"Australian Dollar\" },\n  { code: \"CAD\", symbol: \"C$\", name: \"Canadian Dollar\" },\n  { code: \"CHF\", symbol: \"Fr\", name: \"Swiss Franc\" },\n  { code: \"CNY\", symbol: \"¥\", name: \"Chinese Yuan\" },\n  { code: \"INR\", symbol: \"₹\", name: \"Indian Rupee\" },\n  { code: \"BRL\", symbol: \"R$\", name: \"Brazilian Real\" }\n];\n\nexport const FONT_FAMILIES = [\n  { value: \"Inter\", label: \"Inter (Default)\" },\n  { value: \"Arial\", label: \"Arial\" },\n  { value: \"Helvetica\", label: \"Helvetica\" },\n  { value: \"Times New Roman\", label: \"Times New Roman\" },\n  { value: \"Georgia\", label: \"Georgia\" },\n  { value: \"Roboto\", label: \"Roboto\" },\n  { value: \"Open Sans\", label: \"Open Sans\" },\n  { value: \"Lato\", label: \"Lato\" }\n];\n\nexport function getCurrencySymbol(currencyCode: string): string {\n  const currency = CURRENCIES.find(c => c.code === currencyCode);\n  return currency ? currency.symbol : \"$\";\n}\n\nexport function getTemplateById(templateId: string): InvoiceTemplate {\n  return INVOICE_TEMPLATES.find(t => t.id === templateId) || INVOICE_TEMPLATES[0];\n}","size_bytes":4304},"client/src/lib/pdf-generator.tsx":{"content":"import { Document, Page, Text, View, StyleSheet, Image, PDFDownloadLink } from '@react-pdf/renderer';\nimport { InvoiceWithLineItems } from '@shared/schema';\nimport { getCurrencySymbol } from './invoice-templates';\n\nconst styles = StyleSheet.create({\n  page: {\n    flexDirection: 'column',\n    backgroundColor: '#FFFFFF',\n    padding: 40,\n    fontSize: 12,\n    fontFamily: 'Helvetica',\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 40,\n  },\n  logo: {\n    width: 100,\n    height: 60,\n    objectFit: 'contain',\n  },\n  companyInfo: {\n    flexDirection: 'column',\n  },\n  invoiceInfo: {\n    flexDirection: 'column',\n    alignItems: 'flex-end',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 10,\n  },\n  subtitle: {\n    fontSize: 14,\n    fontWeight: 'bold',\n    marginBottom: 5,\n  },\n  text: {\n    fontSize: 12,\n    marginBottom: 3,\n  },\n  billTo: {\n    marginBottom: 30,\n  },\n  table: {\n    marginBottom: 30,\n  },\n  tableHeader: {\n    flexDirection: 'row',\n    backgroundColor: '#f3f4f6',\n    padding: 10,\n    fontWeight: 'bold',\n  },\n  tableRow: {\n    flexDirection: 'row',\n    borderBottomWidth: 1,\n    borderBottomColor: '#e5e7eb',\n    padding: 10,\n  },\n  tableColDescription: {\n    width: '50%',\n  },\n  tableColQty: {\n    width: '15%',\n    textAlign: 'center',\n  },\n  tableColRate: {\n    width: '17.5%',\n    textAlign: 'right',\n  },\n  tableColAmount: {\n    width: '17.5%',\n    textAlign: 'right',\n  },\n  totals: {\n    alignItems: 'flex-end',\n    marginBottom: 30,\n  },\n  totalRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    width: 200,\n    marginBottom: 5,\n  },\n  totalLabel: {\n    fontSize: 12,\n  },\n  totalValue: {\n    fontSize: 12,\n    fontWeight: 'bold',\n  },\n  grandTotal: {\n    fontSize: 14,\n    fontWeight: 'bold',\n    borderTopWidth: 1,\n    borderTopColor: '#000000',\n    paddingTop: 5,\n  },\n  notes: {\n    marginTop: 30,\n  },\n  qrCode: {\n    width: 60,\n    height: 60,\n    marginTop: 10,\n  },\n});\n\ninterface PDFInvoiceProps {\n  invoice: InvoiceWithLineItems;\n  qrCodeDataURL?: string;\n}\n\nexport function PDFInvoice({ invoice, qrCodeDataURL }: PDFInvoiceProps) {\n  // Generate QR code URL if invoice is hosted and no QR code provided\n  const invoiceQRCode = qrCodeDataURL || (invoice.isHosted && invoice.hostedUrl ? \n    `https://api.qrserver.com/v1/create-qr-code/?size=200x200&format=png&data=${encodeURIComponent(invoice.hostedUrl)}` : null);\n  \n  const currencySymbol = getCurrencySymbol(invoice.currency || \"USD\");\n  const primaryColor = invoice.primaryColor || \"#2563eb\";\n  \n  // Create dynamic styles based on invoice template\n  const dynamicStyles = StyleSheet.create({\n    titleColored: {\n      fontSize: 24,\n      fontWeight: 'bold',\n      marginBottom: 10,\n      color: primaryColor,\n    },\n    tableHeaderColored: {\n      flexDirection: 'row',\n      backgroundColor: primaryColor,\n      padding: 10,\n      fontWeight: 'bold',\n      color: '#ffffff',\n    },\n    grandTotalColored: {\n      fontSize: 14,\n      fontWeight: 'bold',\n      borderTopWidth: 1,\n      borderTopColor: primaryColor,\n      paddingTop: 5,\n      color: primaryColor,\n    },\n  });\n  \n  return (\n    <Document>\n      <Page size=\"A4\" style={styles.page}>\n        {/* Header */}\n        <View style={styles.header}>\n          <View style={styles.companyInfo}>\n            {invoice.companyLogo && (\n              <Image src={invoice.companyLogo} style={styles.logo} />\n            )}\n            <Text style={styles.subtitle}>{invoice.companyName}</Text>\n            <Text style={styles.text}>{invoice.companyEmail}</Text>\n            {invoice.companyPhone && <Text style={styles.text}>{invoice.companyPhone}</Text>}\n            {invoice.companyWebsite && <Text style={styles.text}>{invoice.companyWebsite}</Text>}\n            {invoice.companyAddress && (\n              <Text style={styles.text}>{invoice.companyAddress}</Text>\n            )}\n          </View>\n          <View style={styles.invoiceInfo}>\n            <Text style={dynamicStyles.titleColored}>\n              {invoice.documentType === \"credit-note\" ? \"CREDIT NOTE\" :\n               invoice.documentType === \"quote\" ? \"QUOTE\" :\n               invoice.documentType === \"purchase-order\" ? \"PURCHASE ORDER\" :\n               \"INVOICE\"}\n            </Text>\n            <Text style={styles.text}>#{invoice.invoiceNumber}</Text>\n            <Text style={styles.text}>Date: {new Date(invoice.invoiceDate).toLocaleDateString()}</Text>\n            {invoice.dueDate && (\n              <Text style={styles.text}>Due: {new Date(invoice.dueDate).toLocaleDateString()}</Text>\n            )}\n            {/* QR Code positioned below invoice info */}\n            {invoiceQRCode && (\n              <Image src={invoiceQRCode} style={styles.qrCode} />\n            )}\n          </View>\n        </View>\n\n        {/* Bill To */}\n        <View style={styles.billTo}>\n          <Text style={styles.subtitle}>Bill To:</Text>\n          <Text style={styles.text}>{invoice.clientName}</Text>\n          {invoice.clientCompany && <Text style={styles.text}>{invoice.clientCompany}</Text>}\n          <Text style={styles.text}>{invoice.clientEmail}</Text>\n          {invoice.clientPhone && <Text style={styles.text}>{invoice.clientPhone}</Text>}\n          {invoice.clientAddress && <Text style={styles.text}>{invoice.clientAddress}</Text>}\n        </View>\n\n        {/* Line Items Table */}\n        <View style={styles.table}>\n          <View style={dynamicStyles.tableHeaderColored}>\n            <Text style={styles.tableColDescription}>Description</Text>\n            <Text style={styles.tableColQty}>Qty</Text>\n            <Text style={styles.tableColRate}>Rate</Text>\n            <Text style={styles.tableColAmount}>Amount</Text>\n          </View>\n          {invoice.lineItems.map((item, index) => (\n            <View key={index} style={styles.tableRow}>\n              <Text style={styles.tableColDescription}>{item.description}</Text>\n              <Text style={styles.tableColQty}>{item.quantity}</Text>\n              <Text style={styles.tableColRate}>{currencySymbol}{item.rate}</Text>\n              <Text style={styles.tableColAmount}>{currencySymbol}{item.amount}</Text>\n            </View>\n          ))}\n        </View>\n\n        {/* Totals */}\n        <View style={styles.totals}>\n          <View style={styles.totalRow}>\n            <Text style={styles.totalLabel}>Subtotal:</Text>\n            <Text style={styles.totalValue}>{currencySymbol}{invoice.subtotal}</Text>\n          </View>\n          {parseFloat(invoice.taxPercentage || \"0\") > 0 && (\n            <View style={styles.totalRow}>\n              <Text style={styles.totalLabel}>Tax ({invoice.taxPercentage}%):</Text>\n              <Text style={styles.totalValue}>{currencySymbol}{invoice.tax}</Text>\n            </View>\n          )}\n          {parseFloat(invoice.shippingCost || \"0\") > 0 && (\n            <View style={styles.totalRow}>\n              <Text style={styles.totalLabel}>Shipping Cost:</Text>\n              <Text style={styles.totalValue}>{currencySymbol}{invoice.shippingCost}</Text>\n            </View>\n          )}\n          <View style={[styles.totalRow, dynamicStyles.grandTotalColored]}>\n            <Text style={styles.totalLabel}>Total:</Text>\n            <Text style={styles.totalValue}>{currencySymbol}{invoice.total}</Text>\n          </View>\n        </View>\n\n        {/* Notes */}\n        {invoice.notes && (\n          <View style={styles.notes}>\n            <Text style={styles.subtitle}>Notes:</Text>\n            <Text style={styles.text}>{invoice.notes}</Text>\n          </View>\n        )}\n      </Page>\n    </Document>\n  );\n}\n\ninterface PDFDownloadButtonProps {\n  invoice: InvoiceWithLineItems;\n  qrCodeDataURL?: string;\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport function PDFDownloadButton({ invoice, qrCodeDataURL, children, className }: PDFDownloadButtonProps) {\n  return (\n    <PDFDownloadLink\n      document={<PDFInvoice invoice={invoice} qrCodeDataURL={qrCodeDataURL} />}\n      fileName={`invoice-${invoice.invoiceNumber}.pdf`}\n      className={className}\n    >\n      {children}\n    </PDFDownloadLink>\n  );\n}\n","size_bytes":8144},"client/src/lib/qr-generator.ts":{"content":"import QRCode from 'qrcode';\n\nexport async function generateQRCode(text: string): Promise<string> {\n  try {\n    // Validate URL\n    if (!text || !text.startsWith('http')) {\n      throw new Error('Invalid URL for QR code');\n    }\n    \n    const qrCodeDataURL = await QRCode.toDataURL(text, {\n      width: 200,\n      margin: 2,\n      errorCorrectionLevel: 'M',\n      color: {\n        dark: '#000000',\n        light: '#FFFFFF'\n      }\n    });\n    return qrCodeDataURL;\n  } catch (error) {\n    console.error('Error generating QR code:', error);\n    // Fallback to online QR code generator\n    const fallbackUrl = `https://api.qrserver.com/v1/create-qr-code/?size=200x200&format=png&data=${encodeURIComponent(text)}`;\n    return fallbackUrl;\n  }\n}\n\nexport async function generateQRCodeSVG(text: string): Promise<string> {\n  try {\n    const qrCodeSVG = await QRCode.toString(text, {\n      type: 'svg',\n      width: 200,\n      margin: 2,\n    });\n    return qrCodeSVG;\n  } catch (error) {\n    console.error('Error generating QR code SVG:', error);\n    throw new Error('Failed to generate QR code');\n  }\n}\n","size_bytes":1097},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/create-invoice.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport SimplifiedInvoiceForm from \"@/components/simplified-invoice-form\";\nimport InvoicePreview from \"@/components/invoice-preview\";\nimport EmailModal from \"@/components/email-modal\";\nimport LogoUpload from \"@/components/logo-upload\";\nimport { PDFDownloadButton } from \"@/lib/pdf-generator\";\nimport { useInvoiceStorage } from \"@/hooks/use-invoice-storage\";\nimport { generateQRCode } from \"@/lib/qr-generator\";\nimport type { InvoiceFormData, LineItemFormData } from \"@/types/invoice\";\nimport type {\n  InvoiceWithLineItems,\n  CreateInvoiceRequest,\n} from \"@shared/schema\";\n\nconst defaultFormData: InvoiceFormData = {\n  companyName: \"\",\n  companyEmail: \"\",\n  companyPhone: \"\",\n  companyWebsite: \"\",\n  companyAddress: \"\",\n  companyLogo: null,\n  clientName: \"\",\n  clientEmail: \"\",\n  clientCompany: \"\",\n  clientPhone: \"\",\n  clientAddress: \"\",\n  invoiceNumber: `INV-${Date.now().toString().slice(-6)}`,\n  invoiceDate: new Date().toISOString().split(\"T\")[0],\n  dueDate: \"\",\n  notes: \"\",\n  currency: \"USD\",\n  taxPercentage: \"0\",\n  shippingCost: \"0\",\n  template: \"classic\",\n  documentType: \"invoice\",\n  primaryColor: \"#2563eb\",\n  secondaryColor: \"#64748b\",\n  fontFamily: \"Inter\",\n  status: \"draft\",\n  isHosted: false,\n  isPasswordProtected: false,\n  password: \"\",\n};\n\nexport default function CreateInvoice() {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { saveDraft } = useInvoiceStorage();\n\n  const [formData, setFormData] = useState<InvoiceFormData>(defaultFormData);\n  const [lineItems, setLineItems] = useState<LineItemFormData[]>([]);\n  const [isEmailModalOpen, setIsEmailModalOpen] = useState(false);\n  const [qrCodeDataURL, setQRCodeDataURL] = useState<string | null>(null);\n  const [hasVisitedHistory, setHasVisitedHistory] = useState(false);\n  const [justCreatedInvoice, setJustCreatedInvoice] = useState(false);\n\n  const handleLineItemChange = (\n    index: number,\n    field: keyof LineItemFormData,\n    value: string | number,\n  ) => {\n    const updatedItems = [...lineItems];\n    updatedItems[index] = { ...updatedItems[index], [field]: value };\n\n    // Calculate amount when rate or quantity changes\n    if (field === \"rate\" || field === \"quantity\") {\n      const rate =\n        field === \"rate\"\n          ? parseFloat(value.toString())\n          : parseFloat(updatedItems[index].rate);\n      const quantity =\n        field === \"quantity\" ? Number(value) : updatedItems[index].quantity;\n      updatedItems[index].amount = ((rate || 0) * (quantity || 0)).toFixed(2);\n    }\n\n    setLineItems(updatedItems);\n  };\n\n  const addLineItem = () => {\n    setLineItems([\n      ...lineItems,\n      { description: \"\", quantity: 1, rate: \"0.00\", amount: \"0.00\" },\n    ]);\n  };\n\n  const removeLineItem = (index: number) => {\n    const updatedItems = lineItems.filter((_, i) => i !== index);\n    setLineItems(updatedItems);\n  };\n\n  // Initialize with one line item if empty\n  useEffect(() => {\n    if (lineItems.length === 0) {\n      setLineItems([\n        { description: \"\", quantity: 1, rate: \"0.00\", amount: \"0.00\" },\n      ]);\n    }\n  }, [lineItems.length]);\n\n  const isEditing = !!params.id;\n\n  // Fetch invoice for editing\n  const { data: existingInvoice, isLoading } = useQuery<InvoiceWithLineItems>({\n    queryKey: [\"/api/invoices\", params.id],\n    enabled: isEditing,\n  });\n\n  // Create invoice mutation\n  const createInvoiceMutation = useMutation({\n    mutationFn: async (data: CreateInvoiceRequest) => {\n      const response = await apiRequest(\"POST\", \"/api/invoices\", data);\n      return response.json();\n    },\n    onSuccess: (invoice: InvoiceWithLineItems) => {\n      toast({\n        title: \"Invoice created successfully!\",\n        description: `Invoice ${invoice.invoiceNumber} has been created.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      setJustCreatedInvoice(true);\n      // Update the URL to editing mode without redirecting\n      setLocation(`/edit/${invoice.id}`);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to create invoice\",\n        description:\n          error.message || \"An error occurred while creating the invoice.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update invoice mutation\n  const updateInvoiceMutation = useMutation({\n    mutationFn: async (data: Partial<InvoiceFormData>) => {\n      const response = await apiRequest(\n        \"PATCH\",\n        `/api/invoices/${params.id}`,\n        data,\n      );\n      return response.json();\n    },\n    onSuccess: (invoice: InvoiceWithLineItems) => {\n      toast({\n        title: \"Invoice updated successfully!\",\n        description: `Invoice ${invoice.invoiceNumber} has been updated.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to update invoice\",\n        description:\n          error.message || \"An error occurred while updating the invoice.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Check if user came from history page\n  useEffect(() => {\n    const fromHistory = localStorage.getItem(\"fromHistory\");\n    if (fromHistory === \"true\") {\n      setHasVisitedHistory(true);\n      localStorage.removeItem(\"fromHistory\");\n    }\n  }, []);\n\n  // Reset justCreatedInvoice flag when user navigates away or refreshes\n  useEffect(() => {\n    // On mount, check if this is a fresh page load (not just created)\n    if (!isEditing) {\n      setJustCreatedInvoice(false);\n    }\n    return () => {\n      setJustCreatedInvoice(false);\n    };\n  }, [isEditing]);\n\n  // Load existing invoice data when editing\n  useEffect(() => {\n    if (existingInvoice) {\n      setFormData({\n        companyName: existingInvoice.companyName,\n        companyEmail: existingInvoice.companyEmail,\n        companyPhone: existingInvoice.companyPhone || \"\",\n        companyWebsite: existingInvoice.companyWebsite || \"\",\n        companyAddress: existingInvoice.companyAddress || \"\",\n        companyLogo: existingInvoice.companyLogo,\n        clientName: existingInvoice.clientName,\n        clientEmail: existingInvoice.clientEmail,\n        clientCompany: existingInvoice.clientCompany || \"\",\n        clientPhone: existingInvoice.clientPhone || \"\",\n        clientAddress: existingInvoice.clientAddress || \"\",\n        invoiceNumber: existingInvoice.invoiceNumber,\n        invoiceDate: existingInvoice.invoiceDate,\n        dueDate: existingInvoice.dueDate || \"\",\n        notes: existingInvoice.notes || \"\",\n        currency: existingInvoice.currency || \"USD\",\n        taxPercentage: existingInvoice.taxPercentage || \"0\",\n        shippingCost: existingInvoice.shippingCost || \"0\",\n        template: existingInvoice.template || \"classic\",\n        documentType: existingInvoice.documentType || \"invoice\",\n        primaryColor: existingInvoice.primaryColor || \"#2563eb\",\n        secondaryColor: existingInvoice.secondaryColor || \"#64748b\",\n        fontFamily: existingInvoice.fontFamily || \"Inter\",\n        status: existingInvoice.status,\n        isHosted: existingInvoice.isHosted || false,\n        isPasswordProtected: existingInvoice.isPasswordProtected || false,\n        password: existingInvoice.password || \"\",\n      });\n\n      setLineItems(\n        existingInvoice.lineItems.map((item) => ({\n          description: item.description,\n          quantity: item.quantity,\n          rate: item.rate,\n          amount: item.amount,\n        })),\n      );\n    }\n  }, [existingInvoice]);\n\n  // Generate QR code when hosting is enabled\n  useEffect(() => {\n    if (formData.isHosted && existingInvoice) {\n      // Get the correct hosted URL from the API\n      fetch(`/api/invoices/${existingInvoice.id}/hosted-url`)\n        .then((res) => res.json())\n        .then((data) => {\n          if (data.hostedUrl) {\n            return generateQRCode(data.hostedUrl);\n          }\n          throw new Error(\"No hosted URL received\");\n        })\n        .then(setQRCodeDataURL)\n        .catch((error) => {\n          console.error(\"QR Code generation failed:\", error);\n          setQRCodeDataURL(null);\n        });\n    } else {\n      setQRCodeDataURL(null);\n    }\n  }, [formData.isHosted, existingInvoice]);\n\n  const handleFormChange = (field: keyof InvoiceFormData, value: any) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleSave = () => {\n    if (\n      !formData.companyName ||\n      !formData.companyEmail ||\n      !formData.clientName ||\n      !formData.clientEmail\n    ) {\n      toast({\n        title: \"Missing required fields\",\n        description: \"Please fill in all required fields before saving.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (lineItems.length === 0 || !lineItems[0].description) {\n      toast({\n        title: \"No line items\",\n        description: \"Please add at least one line item before saving.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const invoiceData: CreateInvoiceRequest = {\n      invoice: {\n        ...formData,\n        subtotal: \"0\", // Will be calculated on backend\n        tax: \"0\",\n        total: \"0\",\n      },\n      lineItems: lineItems.map((item) => ({\n        description: item.description,\n        quantity: item.quantity,\n        rate: item.rate,\n        amount: item.amount,\n      })),\n    };\n\n    if (isEditing) {\n      updateInvoiceMutation.mutate(formData);\n    } else {\n      createInvoiceMutation.mutate(invoiceData);\n    }\n  };\n\n  const handleSaveDraft = () => {\n    const subtotal = lineItems.reduce((sum, item) => {\n      const amount = parseFloat(item.rate || \"0\") * (item.quantity || 0);\n      return sum + amount;\n    }, 0);\n\n    const taxAmount =\n      (subtotal * parseFloat(formData.taxPercentage || \"0\")) / 100;\n    const shippingAmount = parseFloat(formData.shippingCost || \"0\");\n    const finalTotal = subtotal + taxAmount + shippingAmount;\n\n    const draftInvoice: InvoiceWithLineItems = {\n      id: `draft-${Date.now()}`,\n      ...formData,\n      textInformation: null,\n      shippingCode: null,\n      documentType: formData.documentType || \"invoice\",\n      subtotal: subtotal.toFixed(2),\n      tax: taxAmount.toFixed(2),\n      total: finalTotal.toFixed(2),\n      hostedUrl: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      lineItems: lineItems.map((item, index) => ({\n        id: `draft-line-${index}`,\n        invoiceId: `draft-${Date.now()}`,\n        description: item.description,\n        quantity: item.quantity,\n        rate: item.rate,\n        amount: item.amount,\n      })),\n    };\n\n    saveDraft(draftInvoice);\n    toast({\n      title: \"Draft saved\",\n      description: \"Your invoice has been saved as a draft locally.\",\n    });\n  };\n\n  const getCurrentInvoice = (): InvoiceWithLineItems | null => {\n    if (existingInvoice) return existingInvoice;\n\n    const subtotal = lineItems.reduce((sum, item) => {\n      const amount = parseFloat(item.rate || \"0\") * (item.quantity || 0);\n      return sum + amount;\n    }, 0);\n\n    return {\n      id: \"preview\",\n      invoiceNumber: formData.invoiceNumber,\n      status: formData.status,\n      companyName: formData.companyName,\n      companyEmail: formData.companyEmail,\n      companyPhone: formData.companyPhone || null,\n      companyWebsite: formData.companyWebsite || null,\n      companyAddress: formData.companyAddress || null,\n      companyLogo: formData.companyLogo,\n      clientName: formData.clientName,\n      clientEmail: formData.clientEmail,\n      clientCompany: formData.clientCompany || null,\n      clientPhone: formData.clientPhone || null,\n      clientAddress: formData.clientAddress || null,\n      invoiceDate: formData.invoiceDate,\n      dueDate: formData.dueDate || null,\n      notes: formData.notes || null,\n      textInformation: null,\n      shippingCode: null,\n      currency: formData.currency || \"USD\",\n      taxPercentage: formData.taxPercentage || \"0\",\n      shippingCost: formData.shippingCost || \"0\",\n      template: formData.template || \"classic\",\n      documentType: formData.documentType || \"invoice\",\n      primaryColor: formData.primaryColor || \"#2563eb\",\n      secondaryColor: formData.secondaryColor || \"#64748b\",\n      fontFamily: formData.fontFamily || \"Inter\",\n      subtotal: subtotal.toFixed(2),\n      tax: (\n        (subtotal * parseFloat(formData.taxPercentage || \"0\")) /\n        100\n      ).toFixed(2),\n      total: (\n        subtotal +\n        (subtotal * parseFloat(formData.taxPercentage || \"0\")) / 100 +\n        parseFloat(formData.shippingCost || \"0\")\n      ).toFixed(2),\n      isHosted: formData.isHosted || false,\n      isPasswordProtected: formData.isPasswordProtected || false,\n      password: formData.password || null,\n      hostedUrl: null, // Will be set by the server after creation\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      lineItems: lineItems.map((item, index) => ({\n        id: `preview-${index}`,\n        invoiceId: \"preview\",\n        description: item.description,\n        quantity: item.quantity,\n        rate: item.rate,\n        amount: item.amount,\n      })),\n    };\n  };\n\n  if (isEditing && isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <i className=\"fas fa-spinner fa-spin text-2xl text-primary\"></i>\n      </div>\n    );\n  }\n\n  const currentInvoice = getCurrentInvoice();\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <Card className=\"glass hover-lift shadow-premium border-0\">\n        <CardContent className=\"p-6 lg:p-8\">\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6\">\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-xl flex items-center justify-center\">\n                  <i className=\"fas fa-receipt text-white text-xl\"></i>\n                </div>\n                <div>\n                  <h2 className=\"text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent\">\n                    {isEditing ? \"Edit Invoice\" : \"Create New Invoice\"}\n                  </h2>\n                  <p className=\"text-gray-600 font-medium\">\n                    {isEditing\n                      ? \"Update the details of your invoice\"\n                      : \"Fill in the details below to generate your professional invoice\"}\n                  </p>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex flex-col sm:flex-row flex-wrap gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={handleSaveDraft}\n                disabled={\n                  createInvoiceMutation.isPending ||\n                  updateInvoiceMutation.isPending\n                }\n                className=\"w-full sm:w-auto btn-animate bg-white/80 hover:bg-white border-white/20 hover:border-white/40 text-gray-700 hover:text-gray-900 shadow-lg\"\n              >\n                <i className=\"fas fa-save mr-2\"></i>Save Draft\n              </Button>\n              <Button\n                onClick={handleSave}\n                disabled={\n                  createInvoiceMutation.isPending ||\n                  updateInvoiceMutation.isPending\n                }\n                className=\"w-full sm:w-auto btn-animate bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white shadow-lg hover:shadow-xl border-0\"\n              >\n                {createInvoiceMutation.isPending ||\n                updateInvoiceMutation.isPending ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>Saving...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-check mr-2\"></i>\n                    {isEditing ? \"Update Invoice\" : \"Create Invoice\"}\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Main Content */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 lg:gap-8\">\n        {/* Left Column - Form */}\n        <div className=\"lg:col-span-2\">\n          {/* Company Information and Bill To - Two Columns */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                {/* First Column - Company Details */}\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                    Company Information\n                  </h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"col-span-full\">\n                      <LogoUpload\n                        onLogoChange={(logo) =>\n                          handleFormChange(\"companyLogo\", logo)\n                        }\n                        currentLogo={formData.companyLogo}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"companyName\">Company Name *</Label>\n                      <Input\n                        id=\"companyName\"\n                        value={formData.companyName}\n                        onChange={(e) =>\n                          handleFormChange(\"companyName\", e.target.value)\n                        }\n                        placeholder=\"Acme Corporation\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"companyEmail\">Email Address *</Label>\n                      <Input\n                        id=\"companyEmail\"\n                        type=\"email\"\n                        value={formData.companyEmail}\n                        onChange={(e) =>\n                          handleFormChange(\"companyEmail\", e.target.value)\n                        }\n                        placeholder=\"hello@acmecorp.com\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"companyPhone\">Phone Number</Label>\n                      <Input\n                        id=\"companyPhone\"\n                        type=\"tel\"\n                        value={formData.companyPhone}\n                        onChange={(e) =>\n                          handleFormChange(\"companyPhone\", e.target.value)\n                        }\n                        placeholder=\"+1 (555) 123-4567\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"companyWebsite\">Website</Label>\n                      <Input\n                        id=\"companyWebsite\"\n                        type=\"url\"\n                        value={formData.companyWebsite}\n                        onChange={(e) =>\n                          handleFormChange(\"companyWebsite\", e.target.value)\n                        }\n                        placeholder=\"www.acmecorp.com\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"companyAddress\">Address</Label>\n                      <Textarea\n                        id=\"companyAddress\"\n                        value={formData.companyAddress}\n                        onChange={(e) =>\n                          handleFormChange(\"companyAddress\", e.target.value)\n                        }\n                        rows={3}\n                        placeholder=\"123 Business St, Suite 100&#10;New York, NY 10001\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                {/* Second Column - Bill To */}\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                    Bill To\n                  </h3>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"clientName\">Client Name *</Label>\n                      <Input\n                        id=\"clientName\"\n                        value={formData.clientName}\n                        onChange={(e) =>\n                          handleFormChange(\"clientName\", e.target.value)\n                        }\n                        placeholder=\"John Smith\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"clientEmail\">Client Email *</Label>\n                      <Input\n                        id=\"clientEmail\"\n                        type=\"email\"\n                        value={formData.clientEmail}\n                        onChange={(e) =>\n                          handleFormChange(\"clientEmail\", e.target.value)\n                        }\n                        placeholder=\"john@example.com\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"clientCompany\">Company</Label>\n                      <Input\n                        id=\"clientCompany\"\n                        value={formData.clientCompany}\n                        onChange={(e) =>\n                          handleFormChange(\"clientCompany\", e.target.value)\n                        }\n                        placeholder=\"Client Company Inc\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"clientPhone\">Phone</Label>\n                      <Input\n                        id=\"clientPhone\"\n                        type=\"tel\"\n                        value={formData.clientPhone}\n                        onChange={(e) =>\n                          handleFormChange(\"clientPhone\", e.target.value)\n                        }\n                        placeholder=\"+1 (555) 987-6543\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"clientAddress\">Billing Address</Label>\n                      <Textarea\n                        id=\"clientAddress\"\n                        value={formData.clientAddress}\n                        onChange={(e) =>\n                          handleFormChange(\"clientAddress\", e.target.value)\n                        }\n                        rows={3}\n                        placeholder=\"456 Client Ave&#10;Los Angeles, CA 90210\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Line Items Section */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                Line Items\n              </h3>\n              <div className=\"space-y-4\">\n                {lineItems.map((item, index) => (\n                  <div\n                    key={index}\n                    className=\"grid grid-cols-1 md:grid-cols-12 gap-4 p-4 border border-gray-200 rounded-lg\"\n                  >\n                    <div className=\"md:col-span-5\">\n                      <Label htmlFor={`description-${index}`}>\n                        Description\n                      </Label>\n                      <Input\n                        id={`description-${index}`}\n                        value={item.description}\n                        onChange={(e) =>\n                          handleLineItemChange(\n                            index,\n                            \"description\",\n                            e.target.value,\n                          )\n                        }\n                        placeholder=\"Service or product description\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div className=\"md:col-span-2\">\n                      <Label htmlFor={`quantity-${index}`}>Qty</Label>\n                      <Input\n                        id={`quantity-${index}`}\n                        type=\"number\"\n                        min=\"1\"\n                        value={item.quantity}\n                        onChange={(e) =>\n                          handleLineItemChange(\n                            index,\n                            \"quantity\",\n                            parseInt(e.target.value) || 0,\n                          )\n                        }\n                        placeholder=\"1\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div className=\"md:col-span-2\">\n                      <Label htmlFor={`rate-${index}`}>Rate</Label>\n                      <Input\n                        id={`rate-${index}`}\n                        type=\"number\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        value={item.rate}\n                        onChange={(e) =>\n                          handleLineItemChange(index, \"rate\", e.target.value)\n                        }\n                        placeholder=\"0.00\"\n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div className=\"md:col-span-2\">\n                      <Label>Amount</Label>\n                      <div className=\"mt-1 p-2 bg-gray-50 rounded border text-right font-medium\">\n                        ${item.amount}\n                      </div>\n                    </div>\n                    <div className=\"md:col-span-1 flex items-end\">\n                      <Button\n                        type=\"button\"\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => removeLineItem(index)}\n                        className=\"w-full\"\n                      >\n                        <i className=\"fas fa-trash text-xs\"></i>\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={addLineItem}\n                  className=\"w-full border-dashed border-2 py-8 text-gray-500 hover:text-gray-700 hover:border-gray-400\"\n                >\n                  <i className=\"fas fa-plus mr-2\"></i>Add Line Item\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          <SimplifiedInvoiceForm\n            formData={formData}\n            lineItems={lineItems}\n            onFormChange={handleFormChange}\n            onLineItemsChange={setLineItems}\n          />\n        </div>\n\n        {/* Right Column - Preview */}\n        <div className=\"space-y-6\">\n          {/* Mobile: Show preview in collapsed state */}\n          <div className=\"lg:hidden\">\n            <Card className=\"glass border-0 shadow-premium\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-semibold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent\">\n                    Quick Preview\n                  </h3>\n                  {formData.isHosted && qrCodeDataURL && (\n                    <div className=\"w-12 h-12 glass rounded-xl flex items-center justify-center hover-lift\">\n                      <img\n                        src={qrCodeDataURL}\n                        alt=\"QR Code\"\n                        className=\"w-10 h-10 object-contain\"\n                      />\n                    </div>\n                  )}\n                </div>\n                <div className=\"text-sm text-gray-600 space-y-1\">\n                  <div>\n                    <strong>Invoice:</strong>{\" \"}\n                    {formData.invoiceNumber || \"#INV-000\"}\n                  </div>\n                  <div>\n                    <strong>Company:</strong>{\" \"}\n                    {formData.companyName || \"Company Name\"}\n                  </div>\n                  <div>\n                    <strong>Client:</strong>{\" \"}\n                    {formData.clientName || \"Client Name\"}\n                  </div>\n                  <div>\n                    <strong>Total:</strong> $\n                    {lineItems\n                      .reduce(\n                        (sum, item) =>\n                          sum +\n                          parseFloat(item.rate || \"0\") * (item.quantity || 0),\n                        0,\n                      )\n                      .toFixed(2)}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Desktop: Full preview */}\n          <div className=\"hidden lg:block\">\n            <InvoicePreview\n              formData={formData}\n              lineItems={lineItems}\n              onFormChange={handleFormChange}\n            />\n          </div>\n          {/* Actions Container with Create Invoice Button */}\n          <Card className=\"mb-6\">\n            <CardContent className=\"p-4 lg:p-6\">\n              <h3 className=\"text-base lg:text-lg font-semibold text-gray-900 mb-4\">\n                Actions\n              </h3>\n              <div className=\"space-y-3\">\n                {/* Create Invoice Button - Always visible at top */}\n                <Button\n                  onClick={handleSave}\n                  disabled={\n                    createInvoiceMutation.isPending ||\n                    updateInvoiceMutation.isPending\n                  }\n                  className=\"w-full bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white py-3 font-medium shadow-lg hover:shadow-xl border-0\"\n                >\n                  {createInvoiceMutation.isPending ||\n                  updateInvoiceMutation.isPending ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>Saving...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-check mr-2\"></i>\n                      {isEditing ? \"Update Invoice\" : \"Create Invoice\"}\n                    </>\n                  )}\n                </Button>\n\n                {currentInvoice && (\n                  <PDFDownloadButton\n                    invoice={currentInvoice}\n                    qrCodeDataURL={qrCodeDataURL || undefined}\n                    className=\"w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white px-4 py-3 rounded-xl font-medium transition-all duration-300 flex items-center justify-center text-sm lg:text-base shadow-md hover:shadow-lg\"\n                  >\n                    <i className=\"fas fa-download mr-2\"></i>Download PDF\n                  </PDFDownloadButton>\n                )}\n\n                {((!justCreatedInvoice && currentInvoice) ||\n                  (justCreatedInvoice && hasVisitedHistory)) && (\n                  <Button\n                    onClick={() => {\n                      if (!currentInvoice) {\n                        toast({\n                          title: \"No invoice to send\",\n                          description:\n                            \"Please create an invoice first before sending an email.\",\n                          variant: \"destructive\",\n                        });\n                        return;\n                      }\n                      setIsEmailModalOpen(true);\n                    }}\n                    className=\"w-full bg-green-600 hover:bg-green-700 py-3 text-sm lg:text-base\"\n                  >\n                    <i className=\"fas fa-envelope mr-2\"></i>Send Email\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n          {/* Summary */}\n          {lineItems.length > 0 && (\n            <Card className=\"border-l-4 border-l-blue-500\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                  Summary\n                </h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600\">Subtotal:</span>\n                    <span className=\"font-medium\">\n                      $\n                      {lineItems\n                        .reduce((sum, item) => {\n                          const rate = parseFloat(item.rate || \"0\");\n                          const quantity = parseInt(\n                            item.quantity?.toString() || \"0\",\n                          );\n                          return sum + rate * quantity;\n                        }, 0)\n                        .toFixed(2)}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600\">\n                      Tax ({formData.taxPercentage || \"0\"}%):\n                    </span>\n                    <span className=\"font-medium\">\n                      $\n                      {(() => {\n                        const subtotal = lineItems.reduce((sum, item) => {\n                          const rate = parseFloat(item.rate || \"0\");\n                          const quantity = parseInt(\n                            item.quantity?.toString() || \"0\",\n                          );\n                          return sum + rate * quantity;\n                        }, 0);\n                        const taxRate =\n                          parseFloat(formData.taxPercentage || \"0\") / 100;\n                        return (subtotal * taxRate).toFixed(2);\n                      })()}\n                    </span>\n                  </div>\n                  {formData.shippingCost &&\n                    parseFloat(formData.shippingCost) > 0 && (\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-600\">Shipping:</span>\n                        <span className=\"font-medium\">\n                          ${formData.shippingCost}\n                        </span>\n                      </div>\n                    )}\n                  <div className=\"border-t pt-2 flex justify-between\">\n                    <span className=\"text-lg font-semibold text-gray-900\">\n                      Total:\n                    </span>\n                    <span className=\"text-lg font-bold text-blue-600\">\n                      $\n                      {(() => {\n                        const subtotal = lineItems.reduce((sum, item) => {\n                          const rate = parseFloat(item.rate || \"0\");\n                          const quantity = parseInt(\n                            item.quantity?.toString() || \"0\",\n                          );\n                          return sum + rate * quantity;\n                        }, 0);\n                        const taxRate =\n                          parseFloat(formData.taxPercentage || \"0\") / 100;\n                        const tax = subtotal * taxRate;\n                        const shipping = parseFloat(\n                          formData.shippingCost || \"0\",\n                        );\n                        return (subtotal + tax + shipping).toFixed(2);\n                      })()}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n\n      {/* Email Modal */}\n      {currentInvoice && (\n        <EmailModal\n          isOpen={isEmailModalOpen}\n          onClose={() => setIsEmailModalOpen(false)}\n          invoiceId={currentInvoice.id}\n          invoiceNumber={currentInvoice.invoiceNumber}\n          companyName={currentInvoice.companyName}\n          clientEmail={currentInvoice.clientEmail}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":36662},"client/src/pages/invoice-history.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport InvoiceCard from \"@/components/invoice-card\";\nimport { useInvoiceStorage } from \"@/hooks/use-invoice-storage\";\nimport type { InvoiceWithLineItems } from \"@shared/schema\";\n\nexport default function InvoiceHistory() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { drafts } = useInvoiceStorage();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  // Fetch all invoices\n  const { data: invoices = [], isLoading, error } = useQuery<InvoiceWithLineItems[]>({\n    queryKey: [\"/api/invoices\"],\n  });\n\n  // Delete invoice mutation\n  const deleteInvoiceMutation = useMutation({\n    mutationFn: async (invoiceId: string) => {\n      await apiRequest(\"DELETE\", `/api/invoices/${invoiceId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Invoice deleted\",\n        description: \"The invoice has been successfully deleted.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to delete invoice\",\n        description: error.message || \"An error occurred while deleting the invoice.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Combine server invoices with local drafts\n  const allInvoices = [...invoices, ...drafts];\n\n  // Filter invoices based on search term\n  const filteredInvoices = allInvoices.filter((invoice) =>\n    invoice.invoiceNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    invoice.clientName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    invoice.companyName.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleView = (invoice: InvoiceWithLineItems) => {\n    // Set flag that user is coming from history\n    localStorage.setItem('fromHistory', 'true');\n    // For now, redirect to edit page for viewing\n    if (invoice.id.startsWith('draft-')) {\n      // Handle draft viewing differently if needed\n      setLocation(`/edit/${invoice.id}`);\n    } else {\n      setLocation(`/edit/${invoice.id}`);\n    }\n  };\n\n  const handleEdit = (invoice: InvoiceWithLineItems) => {\n    // Set flag that user is coming from history\n    localStorage.setItem('fromHistory', 'true');\n    setLocation(`/edit/${invoice.id}`);\n  };\n\n  const handleDelete = (invoice: InvoiceWithLineItems) => {\n    if (window.confirm(`Are you sure you want to delete invoice ${invoice.invoiceNumber}?`)) {\n      if (invoice.id.startsWith('draft-')) {\n        // Handle draft deletion locally\n        toast({\n          title: \"Draft deleted\",\n          description: \"The draft has been removed from local storage.\",\n        });\n      } else {\n        deleteInvoiceMutation.mutate(invoice.id);\n      }\n    }\n  };\n\n  const handleNewInvoice = () => {\n    // Set flag that user is coming from history\n    localStorage.setItem('fromHistory', 'true');\n    setLocation(\"/create\");\n  };\n\n  if (error) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"text-red-500 mb-4\">\n          <i className=\"fas fa-exclamation-triangle text-4xl\"></i>\n        </div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Error Loading Invoices</h3>\n        <p className=\"text-gray-600\">Failed to load invoices. Please try again.</p>\n        <Button \n          onClick={() => queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] })} \n          className=\"mt-4\"\n        >\n          Retry\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6 lg:space-y-8\">\n      {/* Header */}\n      <Card>\n        <CardContent className=\"p-4 lg:p-6\">\n          <div className=\"flex flex-col gap-4\">\n            <div className=\"text-center lg:text-left\">\n              <h2 className=\"text-xl lg:text-2xl font-semibold text-gray-900\">Invoice History</h2>\n              <p className=\"text-gray-600 mt-1 text-sm lg:text-base\">Manage and view all your created invoices</p>\n            </div>\n            <div className=\"flex flex-col gap-3\">\n              <Input\n                type=\"search\"\n                placeholder=\"Search invoices...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full text-base\"\n              />\n              <Button onClick={handleNewInvoice} className=\"w-full lg:w-auto bg-primary hover:bg-primary-dark py-3 text-base\">\n                <i className=\"fas fa-plus mr-2\"></i>New Invoice\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Content */}\n      {isLoading ? (\n        <div className=\"flex items-center justify-center py-8\">\n          <i className=\"fas fa-spinner fa-spin text-2xl text-primary\"></i>\n        </div>\n      ) : filteredInvoices.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <div className=\"text-gray-400 mb-4\">\n            <i className=\"fas fa-file-invoice text-6xl\"></i>\n          </div>\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n            {searchTerm ? \"No invoices found\" : \"No invoices yet\"}\n          </h3>\n          <p className=\"text-gray-600 mb-6\">\n            {searchTerm \n              ? \"Try adjusting your search terms\" \n              : \"Get started by creating your first professional invoice\"\n            }\n          </p>\n          {!searchTerm && (\n            <Button onClick={handleNewInvoice} className=\"bg-primary hover:bg-primary-dark\">\n              <i className=\"fas fa-plus mr-2\"></i>Create Your First Invoice\n            </Button>\n          )}\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredInvoices.map((invoice) => (\n            <InvoiceCard\n              key={invoice.id}\n              invoice={invoice}\n              onView={handleView}\n              onEdit={handleEdit}\n              onDelete={handleDelete}\n            />\n          ))}\n\n          {/* Add New Invoice Card */}\n          <Card \n            className=\"bg-gray-50 border-2 border-dashed border-gray-300 hover:border-gray-400 transition-colors cursor-pointer\"\n            onClick={handleNewInvoice}\n          >\n            <CardContent className=\"p-6 text-center\">\n              <div className=\"mx-auto w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center mb-4\">\n                <i className=\"fas fa-plus text-xl text-gray-500\"></i>\n              </div>\n              <h3 className=\"font-medium text-gray-900 mb-2\">Create New Invoice</h3>\n              <p className=\"text-sm text-gray-600\">Start building a new professional invoice</p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7101},"client/src/pages/invoice-view.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { InvoiceWithLineItems } from \"@shared/schema\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { getCurrencySymbol, getTemplateById } from \"@/lib/invoice-templates\";\n\ninterface PasswordPromptProps {\n  onSubmit: (password: string) => void;\n  isLoading: boolean;\n  error: string | null;\n}\n\nfunction PasswordPrompt({ onSubmit, isLoading, error }: PasswordPromptProps) {\n  const [password, setPassword] = useState(\"\");\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit(password);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md mx-auto\">\n        <CardHeader className=\"text-center px-4 sm:px-6\">\n          <CardTitle className=\"flex items-center justify-center gap-2 text-lg sm:text-xl\">\n            🔒 Password Protected\n          </CardTitle>\n          <p className=\"text-gray-600 text-sm sm:text-base\">This invoice is password protected. Please enter the password to continue.</p>\n        </CardHeader>\n        <CardContent className=\"px-4 sm:px-6\">\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Input\n                type=\"password\"\n                placeholder=\"Enter password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                autoFocus\n                className=\"w-full text-base\"\n              />\n            </div>\n            {error && (\n              <div className=\"text-red-500 text-sm\">{error}</div>\n            )}\n            <Button type=\"submit\" className=\"w-full text-base py-3\" disabled={isLoading}>\n              {isLoading ? \"Verifying...\" : \"Access Invoice\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction InvoiceDisplay({ invoice }: { invoice: InvoiceWithLineItems }) {\n  const handlePrint = () => {\n    window.print();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-4xl mx-auto bg-white shadow-lg print:shadow-none\">\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row sm:justify-between sm:items-start p-4 sm:p-8 border-b-2 border-gray-200 gap-4\">\n          <div className=\"flex-1\">\n            {invoice.companyLogo && (\n              <img src={invoice.companyLogo} alt=\"Company Logo\" className=\"w-24 h-16 sm:w-32 sm:h-20 object-contain mb-4\" />\n            )}\n            <div className=\"text-xl sm:text-2xl font-bold text-gray-800\">{invoice.companyName}</div>\n            <div className=\"text-gray-600 text-sm sm:text-base\">{invoice.companyEmail}</div>\n            {invoice.companyPhone && <div className=\"text-gray-600 text-sm sm:text-base\">📞 {invoice.companyPhone}</div>}\n            {invoice.companyWebsite && <div className=\"text-gray-600 text-sm sm:text-base\">🌐 {invoice.companyWebsite}</div>}\n            {invoice.companyAddress && (\n              <div className=\"text-gray-600 mt-2 whitespace-pre-line text-sm sm:text-base\">{invoice.companyAddress}</div>\n            )}\n          </div>\n          <div className=\"text-left sm:text-right\">\n            <div className=\"text-2xl sm:text-4xl font-bold mb-2\" style={{ color: invoice.primaryColor || \"#2563eb\" }}>\n              {invoice.documentType === \"credit-note\" ? \"CREDIT NOTE\" :\n               invoice.documentType === \"quote\" ? \"QUOTE\" :\n               invoice.documentType === \"purchase-order\" ? \"PURCHASE ORDER\" :\n               \"INVOICE\"}\n            </div>\n            <div className=\"text-lg sm:text-xl font-semibold\">#{invoice.invoiceNumber}</div>\n            <div className=\"mt-4 space-y-1 text-sm\">\n              <div><strong>Date:</strong> {new Date(invoice.invoiceDate).toLocaleDateString()}</div>\n              {invoice.dueDate && (\n                <div><strong>Due:</strong> {new Date(invoice.dueDate).toLocaleDateString()}</div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Bill To */}\n        <div className=\"p-4 sm:p-8 bg-gray-50 border-b border-gray-200\">\n          <div className=\"font-semibold text-lg mb-2\">Bill To:</div>\n          <div className=\"font-bold text-sm sm:text-base\">{invoice.clientName}</div>\n          {invoice.clientCompany && <div className=\"text-sm sm:text-base\">{invoice.clientCompany}</div>}\n          <div className=\"text-sm sm:text-base\">{invoice.clientEmail}</div>\n          {invoice.clientPhone && <div className=\"text-sm sm:text-base\">📞 {invoice.clientPhone}</div>}\n          {invoice.clientAddress && (\n            <div className=\"mt-1 whitespace-pre-line text-sm sm:text-base\">{invoice.clientAddress}</div>\n          )}\n        </div>\n\n        {/* Line Items - Mobile Optimized */}\n        <div className=\"p-4 sm:p-8\">\n          {/* Desktop Table */}\n          <div className=\"hidden sm:block\">\n            <table className=\"w-full border-collapse\">\n              <thead>\n                <tr className=\"text-white\" style={{ backgroundColor: invoice.primaryColor || \"#2563eb\" }}>\n                  <th className=\"text-left p-4 font-semibold\">Description</th>\n                  <th className=\"text-center p-4 font-semibold\">Qty</th>\n                  <th className=\"text-right p-4 font-semibold\">Rate</th>\n                  <th className=\"text-right p-4 font-semibold\">Amount</th>\n                </tr>\n              </thead>\n              <tbody>\n                {invoice.lineItems.map((item) => (\n                  <tr key={item.id} className=\"border-b border-gray-200\">\n                    <td className=\"p-4\">{item.description}</td>\n                    <td className=\"text-center p-4\">{item.quantity}</td>\n                    <td className=\"text-right p-4\">{getCurrencySymbol(invoice.currency || \"USD\")}{item.rate}</td>\n                    <td className=\"text-right p-4\">{getCurrencySymbol(invoice.currency || \"USD\")}{item.amount}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          {/* Mobile Cards */}\n          <div className=\"sm:hidden space-y-4\">\n            <div className=\"text-white p-3 rounded-t-lg font-semibold\" style={{ backgroundColor: invoice.primaryColor || \"#2563eb\" }}>\n              Line Items\n            </div>\n            {invoice.lineItems.map((item) => (\n              <div key={item.id} className=\"bg-white border border-gray-200 rounded-lg p-4 shadow-sm\">\n                <div className=\"font-semibold text-gray-800 mb-2\">{item.description}</div>\n                <div className=\"grid grid-cols-3 gap-2 text-sm\">\n                  <div>\n                    <span className=\"text-gray-600\">Qty:</span>\n                    <div className=\"font-medium\">{item.quantity}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Rate:</span>\n                    <div className=\"font-medium\">{getCurrencySymbol(invoice.currency || \"USD\")}{item.rate}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Amount:</span>\n                    <div className=\"font-medium\" style={{ color: invoice.primaryColor || \"#2563eb\" }}>{getCurrencySymbol(invoice.currency || \"USD\")}{item.amount}</div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Totals */}\n        <div className=\"px-4 sm:px-8 pb-4 sm:pb-8\">\n          <div className=\"flex justify-center sm:justify-end\">\n            <div className=\"w-full max-w-sm sm:w-64 space-y-2 bg-gray-50 p-4 rounded-lg\">\n              <div className=\"flex justify-between text-sm sm:text-base\">\n                <span>Subtotal:</span>\n                <span>{getCurrencySymbol(invoice.currency || \"USD\")}{invoice.subtotal}</span>\n              </div>\n              {parseFloat(invoice.taxPercentage || \"0\") > 0 && (\n                <div className=\"flex justify-between text-sm sm:text-base\">\n                  <span>Tax ({invoice.taxPercentage}%):</span>\n                  <span>{getCurrencySymbol(invoice.currency || \"USD\")}{invoice.tax}</span>\n                </div>\n              )}\n              {parseFloat(invoice.shippingCost || \"0\") > 0 && (\n                <div className=\"flex justify-between text-sm sm:text-base\">\n                  <span>Shipping Cost:</span>\n                  <span>{getCurrencySymbol(invoice.currency || \"USD\")}{invoice.shippingCost}</span>\n                </div>\n              )}\n              <div className=\"flex justify-between text-lg sm:text-2xl font-bold pt-2 border-t-2\" style={{ \n                color: invoice.primaryColor || \"#2563eb\",\n                borderTopColor: invoice.primaryColor || \"#2563eb\"\n              }}>\n                <span>Total:</span>\n                <span>{getCurrencySymbol(invoice.currency || \"USD\")}{invoice.total}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Notes */}\n        {invoice.notes && (\n          <div className=\"px-4 sm:px-8 pb-4 sm:pb-8 border-t border-gray-200\">\n            <div className=\"font-semibold mb-2 text-sm sm:text-base\">Notes:</div>\n            <div className=\"whitespace-pre-line text-gray-700 text-sm sm:text-base\">{invoice.notes}</div>\n          </div>\n        )}\n\n        {/* Print Button - Hidden when printing */}\n        <div className=\"p-4 sm:p-8 text-center print:hidden\">\n          <Button onClick={handlePrint} className=\"bg-green-600 hover:bg-green-700 w-full sm:w-auto py-3 text-base\">\n            🖨️ Print Invoice\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function InvoiceView() {\n  const params = useParams();\n  const [password, setPassword] = useState<string | null>(null);\n  const [passwordError, setPasswordError] = useState<string | null>(null);\n  const [isVerifying, setIsVerifying] = useState(false);\n\n  // Handle preview route\n  if (params.id === \"preview\") {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md text-center\">\n          <CardHeader>\n            <div className=\"text-6xl mb-4\">📄</div>\n            <CardTitle>Invoice Preview</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p>This is a preview of how your QR code will work.</p>\n            <p className=\"text-gray-600 mt-2\">When you create an invoice and enable hosting, the QR code will link directly to this invoice view.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const { data: invoice, isLoading, error } = useQuery<InvoiceWithLineItems>({\n    queryKey: [\"/api/public/invoices\", params.id],\n    retry: false,\n  });\n\n  const handlePasswordSubmit = async (inputPassword: string) => {\n    if (!invoice) return;\n    \n    setIsVerifying(true);\n    setPasswordError(null);\n\n    // Simple password check - in a real app, this should be done server-side\n    if (invoice.isPasswordProtected && inputPassword === invoice.password) {\n      setPassword(inputPassword);\n    } else if (invoice.isPasswordProtected) {\n      setPasswordError(\"Incorrect password. Please try again.\");\n    } else {\n      setPassword(\"\"); // No password needed\n    }\n    \n    setIsVerifying(false);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <div>Loading invoice...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !invoice) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md text-center\">\n          <CardHeader>\n            <CardTitle className=\"text-red-600\">Invoice Not Found</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p>The requested invoice could not be found or is no longer available.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Show password prompt if needed\n  if (invoice.isPasswordProtected && password !== invoice.password) {\n    return (\n      <PasswordPrompt\n        onSubmit={handlePasswordSubmit}\n        isLoading={isVerifying}\n        error={passwordError}\n      />\n    );\n  }\n\n  return <InvoiceDisplay invoice={invoice} />;\n}","size_bytes":12655},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/invoice.ts":{"content":"export interface InvoiceFormData {\n  // Company info\n  companyName: string;\n  companyEmail: string;\n  companyPhone: string;\n  companyWebsite: string;\n  companyAddress: string;\n  companyLogo: string | null;\n  \n  // Client info\n  clientName: string;\n  clientEmail: string;\n  clientCompany: string;\n  clientPhone: string;\n  clientAddress: string;\n  \n  // Invoice details\n  invoiceNumber: string;\n  invoiceDate: string;\n  dueDate: string;\n  notes: string;\n  currency: string;\n  taxPercentage: string;\n  shippingCost: string;\n  template: string;\n  documentType: string;\n  primaryColor: string;\n  secondaryColor: string;\n  fontFamily: string;\n  status: string;\n  \n  // Hosting & security\n  isHosted: boolean;\n  isPasswordProtected: boolean;\n  password: string;\n}\n\nexport interface LineItemFormData {\n  description: string;\n  quantity: number;\n  rate: string;\n  amount: string;\n}\n\nexport interface EmailFormData {\n  to: string;\n  subject: string;\n  message: string;\n  attachPDF: boolean;\n}\n","size_bytes":983},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 font-display transition-all duration-300 cubic-bezier(0.4, 0, 0.2, 1)\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-gradient-to-r from-blue-600 to-blue-700 text-white hover:from-blue-700 hover:to-blue-800 shadow-md hover:shadow-lg rounded-xl\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-md hover:shadow-lg rounded-xl\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground rounded-xl shadow-sm hover:shadow-md\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80 rounded-xl shadow-sm hover:shadow-md\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground rounded-xl\",\n        link: \"text-primary underline-offset-4 hover:underline rounded-xl\",\n        gradient: \"bg-gradient-to-r from-blue-600 to-indigo-600 text-white hover:from-blue-700 hover:to-indigo-700 shadow-lg hover:shadow-xl rounded-xl\",\n      },\n      size: {\n        default: \"h-11 px-6 py-2.5\",\n        sm: \"h-9 rounded-lg px-4 text-xs\",\n        lg: \"h-12 rounded-xl px-8 text-base\",\n        icon: \"h-11 w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2323},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow-lg hover:shadow-xl transition-all duration-300 hover:-translate-y-0.5\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-2 p-8\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-display font-semibold leading-tight tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-8 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1937},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-5 w-5 shrink-0 rounded-full border-2 border-gray-300 bg-white ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-blue-600 data-[state=checked]:border-blue-600 data-[state=checked]:text-white hover:border-blue-400\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-3.5 w-3.5 font-bold\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1153},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-white text-gray-900 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5730},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[9999] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-green-500 text-white shadow-xl\",\n        destructive:\n          \"destructive group border-red-500 bg-red-500 text-white shadow-xl\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4835},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"README.md":{"content":"\"# Invoice-Genrator\" \n","size_bytes":22},"client/src/hooks/use-theme.ts":{"content":"import React, { createContext, useContext, useEffect, ReactNode } from \"react\";\n\ntype Theme = \"light\";\n\ntype ThemeProviderProps = {\n  children: ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"light\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n  storageKey = \"vite-ui-theme\",\n}: ThemeProviderProps) {\n  const theme: Theme = \"light\"; // Always use light theme\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    // Force light theme and override browser preferences\n    root.classList.remove(\"dark\");\n    root.classList.add(\"light\");\n    \n    // Override system color scheme preference\n    const style = document.createElement('style');\n    style.textContent = `\n      :root {\n        color-scheme: light !important;\n      }\n      @media (prefers-color-scheme: dark) {\n        :root {\n          color-scheme: light !important;\n        }\n      }\n    `;\n    document.head.appendChild(style);\n    \n    return () => {\n      document.head.removeChild(style);\n    };\n  }, []);\n\n  const value = {\n    theme,\n    setTheme: () => {\n      // Do nothing - theme is always light\n    },\n  };\n\n  return React.createElement(ThemeProviderContext.Provider, { value }, children);\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};","size_bytes":1676},"client/src/pages/about.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function About() {\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-4xl font-bold tracking-tight\">About Invoice Pro</h1>\n        <p className=\"text-xl text-muted-foreground\">\n          Professional invoicing made simple for modern businesses\n        </p>\n      </div>\n\n      {/* Mission */}\n      <Card>\n        <CardContent className=\"p-8\">\n          <h2 className=\"text-2xl font-semibold mb-4\">Our Mission</h2>\n          <p className=\"text-lg text-muted-foreground leading-relaxed\">\n            We believe that creating professional invoices shouldn't be complicated or expensive. \n            Invoice Pro was built to empower businesses of all sizes with a simple, powerful, and \n            beautiful invoicing solution that helps you get paid faster.\n          </p>\n        </CardContent>\n      </Card>\n\n      {/* Features */}\n      <Card>\n        <CardContent className=\"p-8\">\n          <h2 className=\"text-2xl font-semibold mb-6\">What We Offer</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-receipt text-primary\"></i>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold\">Professional Templates</h3>\n                  <p className=\"text-sm text-muted-foreground\">Multiple design options for your brand</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-file-pdf text-primary\"></i>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold\">PDF Generation</h3>\n                  <p className=\"text-sm text-muted-foreground\">High-quality PDF exports with QR codes</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-envelope text-primary\"></i>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold\">Email Integration</h3>\n                  <p className=\"text-sm text-muted-foreground\">Send invoices directly to clients</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-qrcode text-primary\"></i>\n                </div>\n                <div>\n                  <h3 className=\"font-semibold\">QR Code Payments</h3>\n                  <p className=\"text-sm text-muted-foreground\">Easy payment access for your clients</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Team */}\n      <Card>\n        <CardContent className=\"p-8\">\n          <h2 className=\"text-2xl font-semibold mb-4\">Built by Professionals</h2>\n          <p className=\"text-muted-foreground leading-relaxed\">\n            Invoice Pro is developed by a team of experienced software engineers and business professionals \n            who understand the challenges of managing invoices and getting paid on time. We're committed to \n            providing you with the best possible experience while keeping your data secure and private.\n          </p>\n        </CardContent>\n      </Card>\n\n      {/* Values */}\n      <Card>\n        <CardContent className=\"p-8\">\n          <h2 className=\"text-2xl font-semibold mb-6\">Our Values</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center space-y-3\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto\">\n                <i className=\"fas fa-shield-alt text-primary text-2xl\"></i>\n              </div>\n              <h3 className=\"font-semibold\">Security First</h3>\n              <p className=\"text-sm text-muted-foreground\">Your data is protected with industry-standard security</p>\n            </div>\n            \n            <div className=\"text-center space-y-3\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto\">\n                <i className=\"fas fa-heart text-primary text-2xl\"></i>\n              </div>\n              <h3 className=\"font-semibold\">Customer Focus</h3>\n              <p className=\"text-sm text-muted-foreground\">We build features that solve real business problems</p>\n            </div>\n            \n            <div className=\"text-center space-y-3\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto\">\n                <i className=\"fas fa-rocket text-primary text-2xl\"></i>\n              </div>\n              <h3 className=\"font-semibold\">Innovation</h3>\n              <p className=\"text-sm text-muted-foreground\">Constantly improving and adding new features</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5730},"client/src/pages/contact.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Contact() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    subject: \"\",\n    message: \"\"\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    \n    // Simulate form submission\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    toast({\n      title: \"Message sent!\",\n      description: \"We'll get back to you within 24 hours.\",\n    });\n    \n    setFormData({ name: \"\", email: \"\", subject: \"\", message: \"\" });\n    setIsSubmitting(false);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-4xl font-bold tracking-tight\">Contact Us</h1>\n        <p className=\"text-xl text-muted-foreground\">\n          Get in touch with our team - we're here to help\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Contact Form */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h2 className=\"text-2xl font-semibold mb-6\">Send us a message</h2>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">Name *</Label>\n                  <Input\n                    id=\"name\"\n                    name=\"name\"\n                    value={formData.name}\n                    onChange={handleChange}\n                    required\n                    placeholder=\"Your full name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email *</Label>\n                  <Input\n                    id=\"email\"\n                    name=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={handleChange}\n                    required\n                    placeholder=\"your@email.com\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"subject\">Subject *</Label>\n                <Input\n                  id=\"subject\"\n                  name=\"subject\"\n                  value={formData.subject}\n                  onChange={handleChange}\n                  required\n                  placeholder=\"How can we help?\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"message\">Message *</Label>\n                <Textarea\n                  id=\"message\"\n                  name=\"message\"\n                  value={formData.message}\n                  onChange={handleChange}\n                  required\n                  placeholder=\"Tell us more about what you need...\"\n                  rows={6}\n                />\n              </div>\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={isSubmitting}\n              >\n                {isSubmitting ? (\n                  <>\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                    Sending...\n                  </>\n                ) : (\n                  <>\n                    <i className=\"fas fa-paper-plane mr-2\"></i>\n                    Send Message\n                  </>\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        {/* Contact Information */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-semibold mb-4\">Get in Touch</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center mt-1\">\n                    <i className=\"fas fa-envelope text-primary\"></i>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium\">Email Support</h4>\n                    <p className=\"text-muted-foreground\">support@invoicepro.com</p>\n                    <p className=\"text-sm text-muted-foreground\">Response time: Within 24 hours</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center mt-1\">\n                    <i className=\"fas fa-comments text-primary\"></i>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium\">Live Chat</h4>\n                    <p className=\"text-muted-foreground\">Available Mon-Fri, 9AM-5PM EST</p>\n                    <Button variant=\"link\" className=\"p-0 h-auto text-primary\">\n                      Start a conversation\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center mt-1\">\n                    <i className=\"fas fa-book text-primary\"></i>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium\">Documentation</h4>\n                    <p className=\"text-muted-foreground\">Find answers in our help center</p>\n                    <Button variant=\"link\" className=\"p-0 h-auto text-primary\">\n                      Browse docs\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-semibold mb-4\">Business Hours</h3>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span>Monday - Friday</span>\n                  <span className=\"text-muted-foreground\">9:00 AM - 6:00 PM EST</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Saturday</span>\n                  <span className=\"text-muted-foreground\">10:00 AM - 4:00 PM EST</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Sunday</span>\n                  <span className=\"text-muted-foreground\">Closed</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <h3 className=\"text-xl font-semibold mb-4\">Follow Us</h3>\n              <div className=\"flex space-x-4\">\n                {[\n                  { icon: 'fab fa-twitter', href: 'https://twitter.com', label: 'Twitter' },\n                  { icon: 'fab fa-linkedin', href: 'https://linkedin.com', label: 'LinkedIn' },\n                  { icon: 'fab fa-github', href: 'https://github.com', label: 'GitHub' },\n                  { icon: 'fab fa-discord', href: 'https://discord.com', label: 'Discord' }\n                ].map((social) => (\n                  <a\n                    key={social.label}\n                    href={social.href}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"w-10 h-10 bg-primary/10 hover:bg-primary/20 rounded-lg flex items-center justify-center text-primary hover:text-primary/80 transition-colors\"\n                    aria-label={social.label}\n                  >\n                    <i className={social.icon}></i>\n                  </a>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8463},"client/src/pages/privacy.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Privacy() {\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-4xl font-bold tracking-tight\">Privacy Policy</h1>\n        <p className=\"text-xl text-muted-foreground\">\n          Last updated: {new Date().toLocaleDateString()}\n        </p>\n      </div>\n\n      <Card>\n        <CardContent className=\"p-8 space-y-6\">\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">1. Information We Collect</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                When you use Invoice Pro, we collect information that helps us provide and improve our services:\n              </p>\n              <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                <li><strong>Account Information:</strong> Name, email address, and company details</li>\n                <li><strong>Invoice Data:</strong> Client information, invoice details, and payment information</li>\n                <li><strong>Usage Data:</strong> How you interact with our application</li>\n                <li><strong>Technical Data:</strong> Browser type, device information, and IP address</li>\n              </ul>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">2. How We Use Your Information</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>We use the information we collect to:</p>\n              <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                <li>Provide and maintain our invoicing services</li>\n                <li>Process and send invoices on your behalf</li>\n                <li>Communicate with you about your account and our services</li>\n                <li>Improve and develop new features</li>\n                <li>Ensure security and prevent fraud</li>\n              </ul>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">3. Information Sharing</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                We do not sell, trade, or otherwise transfer your personal information to third parties, except:\n              </p>\n              <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                <li>When you explicitly request us to share information (e.g., sending invoices to clients)</li>\n                <li>To comply with legal obligations</li>\n                <li>To protect our rights and prevent fraud</li>\n                <li>With service providers who assist in our operations (under strict confidentiality agreements)</li>\n              </ul>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">4. Data Security</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                We implement industry-standard security measures to protect your information:\n              </p>\n              <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                <li>Data encryption in transit and at rest</li>\n                <li>Regular security audits and updates</li>\n                <li>Limited access to personal information</li>\n                <li>Secure data centers with physical and network security</li>\n              </ul>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">5. Your Rights</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>You have the right to:</p>\n              <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                <li>Access and review your personal information</li>\n                <li>Request corrections to inaccurate information</li>\n                <li>Request deletion of your personal information</li>\n                <li>Export your data in a portable format</li>\n                <li>Opt-out of marketing communications</li>\n              </ul>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">6. Cookies and Tracking</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                We use cookies and similar technologies to enhance your experience and analyze usage patterns. \n                You can control cookie settings through your browser preferences.\n              </p>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">7. Data Retention</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                We retain your information for as long as necessary to provide our services and comply with \n                legal obligations. Invoice data may be retained for tax and accounting purposes as required by law.\n              </p>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">8. International Data Transfers</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                Your information may be transferred to and processed in countries other than your own. \n                We ensure appropriate safeguards are in place to protect your information.\n              </p>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">9. Changes to This Policy</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                We may update this Privacy Policy from time to time. We will notify you of any significant \n                changes by email or through our application.\n              </p>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">10. Contact Us</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                If you have questions about this Privacy Policy or our data practices, please contact us at:\n              </p>\n              <div className=\"bg-muted/50 rounded-lg p-4\">\n                <p><strong>Email:</strong> privacy@invoicepro.com</p>\n                <p><strong>Address:</strong> Invoice Pro Privacy Team, [Your Address]</p>\n              </div>\n            </div>\n          </section>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6625},"client/src/pages/terms.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Terms() {\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-4xl font-bold tracking-tight\">Terms of Service</h1>\n        <p className=\"text-xl text-muted-foreground\">\n          Last updated: {new Date().toLocaleDateString()}\n        </p>\n      </div>\n\n      <Card>\n        <CardContent className=\"p-8 space-y-6\">\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">1. Acceptance of Terms</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                By accessing and using Invoice Pro, you accept and agree to be bound by the terms and \n                provisions of this agreement. If you do not agree to these terms, you should not use our service.\n              </p>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">2. Description of Service</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                Invoice Pro is a web-based invoicing application that allows users to:\n              </p>\n              <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                <li>Create and customize professional invoices</li>\n                <li>Generate PDF documents with QR codes</li>\n                <li>Send invoices via email</li>\n                <li>Track invoice history and status</li>\n                <li>Manage client information</li>\n              </ul>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">3. User Accounts</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                To use certain features of our service, you may need to create an account. You are responsible for:\n              </p>\n              <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                <li>Maintaining the confidentiality of your account credentials</li>\n                <li>All activities that occur under your account</li>\n                <li>Providing accurate and current information</li>\n                <li>Promptly updating your account information when changes occur</li>\n              </ul>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">4. Acceptable Use</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>You agree not to use the service to:</p>\n              <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                <li>Create fraudulent or misleading invoices</li>\n                <li>Violate any laws or regulations</li>\n                <li>Infringe on intellectual property rights</li>\n                <li>Transmit harmful or malicious code</li>\n                <li>Interfere with the service's functionality</li>\n                <li>Access another user's account without permission</li>\n              </ul>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">5. Data and Privacy</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                Your use of our service is also governed by our Privacy Policy. We are committed to \n                protecting your data and maintaining your privacy. Please review our Privacy Policy to \n                understand how we collect, use, and protect your information.\n              </p>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">6. Intellectual Property</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                The service and all content, features, and functionality are owned by Invoice Pro and are \n                protected by copyright, trademark, and other intellectual property laws. You may not:\n              </p>\n              <ul className=\"list-disc list-inside space-y-2 ml-4\">\n                <li>Copy, modify, or distribute our software</li>\n                <li>Reverse engineer or attempt to derive source code</li>\n                <li>Remove or alter proprietary notices</li>\n                <li>Create derivative works based on our service</li>\n              </ul>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">7. Service Availability</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                We strive to maintain high availability of our service, but we do not guarantee \n                uninterrupted access. The service may be temporarily unavailable for maintenance, \n                updates, or due to circumstances beyond our control.\n              </p>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">8. Limitation of Liability</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                To the fullest extent permitted by law, Invoice Pro shall not be liable for any indirect, \n                incidental, special, consequential, or punitive damages, including loss of profits, data, \n                or use, arising from your use of the service.\n              </p>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">9. Disclaimer of Warranties</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                The service is provided \"as is\" and \"as available\" without warranties of any kind, \n                either express or implied, including but not limited to implied warranties of \n                merchantability, fitness for a particular purpose, or non-infringement.\n              </p>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">10. Termination</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                We reserve the right to terminate or suspend your account and access to the service \n                at our sole discretion, without notice, for conduct that we believe violates these \n                terms or is harmful to other users or the service.\n              </p>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">11. Changes to Terms</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                We reserve the right to modify these terms at any time. We will notify users of any \n                significant changes via email or through our application. Your continued use of the \n                service after changes constitute acceptance of the new terms.\n              </p>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">12. Governing Law</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                These terms shall be governed by and construed in accordance with the laws of \n                [Your Jurisdiction], without regard to its conflict of law provisions.\n              </p>\n            </div>\n          </section>\n\n          <section>\n            <h2 className=\"text-2xl font-semibold mb-4\">13. Contact Information</h2>\n            <div className=\"space-y-4 text-muted-foreground\">\n              <p>\n                If you have any questions about these Terms of Service, please contact us at:\n              </p>\n              <div className=\"bg-muted/50 rounded-lg p-4\">\n                <p><strong>Email:</strong> legal@invoicepro.com</p>\n                <p><strong>Address:</strong> Invoice Pro Legal Team, [Your Address]</p>\n              </div>\n            </div>\n          </section>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8144},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool\n[x] 5. Implement user isolation for invoices using system identification\n[x] 6. Fix QR code functionality for public invoice viewing\n[x] 7. Add public route for invoice viewing without authentication\n[x] 8. Ensure only invoice owners can edit and see invoices in their history\n[x] 9. Modernize design with beautiful fonts and pink gradients\n[x] 10. Add enhanced animations and hover effects\n[x] 11. Fix footer text alignment to left\n[x] 12. Update color theme to work properly with light/dark modes\n[x] 13. Fix Invoice Pro logo text visibility in light mode\n[x] 14. Fix footer column colors for support and legal sections\n[x] 15. Correct download button colors for both light and dark modes\n[x] 16. Ensure proper dark mode functionality across entire application\n[x] 17. Implement mobile responsiveness improvements\n[x] 18. Add create invoice button in mobile Actions section\n[x] 19. Fix email popup mobile layout\n[x] 20. Create mobile-friendly Line Items layout (vertical stacking)\n[x] 21. Add desktop border radius to Invoice Preview section\n[x] 22. Add Discord, Twitter, and Facebook icons to footer with links\n[x] 23. Fix email popup mobile layout with white background and center positioning\n[x] 24. Implement proper toast notification colors (red for errors, green for success)\n[x] 25. Set z-index 9999 for popups and notifications on mobile\n[x] 26. Change default theme from light to dark theme  \n[x] 27. Remove dark theme and keep only light theme\n[x] 28. Simplify theme provider to force light theme only\n[x] 29. Remove theme switching functionality\n[x] 30. Fix dropdown backgrounds (Document Type, Currency, Invoice Template) to white\n[x] 31. Remove footer links (PDF Export, Email Integration, QR Code Generation)\n[x] 32. Fix theme system to prevent browser dark mode from affecting site\n[x] 33. Generate sitemap.xml for invoicedetail.com\n[x] 34. Add comprehensive SEO meta tags for invoicedetail.com\n[x] 35. Create robots.txt for search engine optimization","size_bytes":2267},"client/src/components/simplified-invoice-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Palette } from \"lucide-react\";\nimport { INVOICE_TEMPLATES, CURRENCIES, FONT_FAMILIES, DOCUMENT_TYPES, getTemplateById } from \"@/lib/invoice-templates\";\nimport type { InvoiceFormData, LineItemFormData } from \"@/types/invoice\";\n\ninterface SimplifiedInvoiceFormProps {\n  formData: InvoiceFormData;\n  lineItems: LineItemFormData[];\n  onFormChange: (field: keyof InvoiceFormData, value: any) => void;\n  onLineItemsChange: (items: LineItemFormData[]) => void;\n}\n\nexport default function SimplifiedInvoiceForm({\n  formData,\n  lineItems,\n  onFormChange,\n  onLineItemsChange,\n}: SimplifiedInvoiceFormProps) {\n  return (\n    <div className=\"space-y-6\">\n      {/* Invoice Details */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Invoice Details</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"invoiceNumber\">Invoice Number *</Label>\n              <Input\n                id=\"invoiceNumber\"\n                value={formData.invoiceNumber}\n                onChange={(e) => onFormChange(\"invoiceNumber\", e.target.value)}\n                placeholder=\"INV-001\"\n                className=\"mt-1\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"invoiceDate\">Invoice Date *</Label>\n              <Input\n                id=\"invoiceDate\"\n                type=\"date\"\n                value={formData.invoiceDate}\n                onChange={(e) => onFormChange(\"invoiceDate\", e.target.value)}\n                className=\"mt-1\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"dueDate\">Due Date</Label>\n              <Input\n                id=\"dueDate\"\n                type=\"date\"\n                value={formData.dueDate}\n                onChange={(e) => onFormChange(\"dueDate\", e.target.value)}\n                className=\"mt-1\"\n              />\n            </div>\n          </div>\n          <div className=\"mt-4\">\n            <Label htmlFor=\"notes\">Notes</Label>\n            <Textarea\n              id=\"notes\"\n              value={formData.notes}\n              onChange={(e) => onFormChange(\"notes\", e.target.value)}\n              rows={3}\n              placeholder=\"Thank you for your business!\"\n              className=\"mt-1\"\n            />\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mt-4\">\n            <div>\n              <Label htmlFor=\"documentType\">Document Type</Label>\n              <Select value={formData.documentType} onValueChange={(value) => onFormChange(\"documentType\", value)}>\n                <SelectTrigger className=\"mt-1\">\n                  <SelectValue placeholder=\"Select type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {DOCUMENT_TYPES.map((type) => (\n                    <SelectItem key={type.value} value={type.value}>\n                      {type.icon} {type.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"currency\">Currency</Label>\n              <Select value={formData.currency} onValueChange={(value) => onFormChange(\"currency\", value)}>\n                <SelectTrigger className=\"mt-1\">\n                  <SelectValue placeholder=\"Select currency\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {CURRENCIES.map((currency) => (\n                    <SelectItem key={currency.code} value={currency.code}>\n                      {currency.symbol} {currency.code} - {currency.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"taxPercentage\">Tax Percentage (%)</Label>\n              <Input\n                id=\"taxPercentage\"\n                type=\"number\"\n                min=\"0\"\n                max=\"100\"\n                step=\"0.01\"\n                value={formData.taxPercentage}\n                onChange={(e) => onFormChange(\"taxPercentage\", e.target.value)}\n                placeholder=\"8.25\"\n                className=\"mt-1\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"shippingCost\">Shipping Cost</Label>\n              <Input\n                id=\"shippingCost\"\n                type=\"number\"\n                min=\"0\"\n                step=\"0.01\"\n                value={formData.shippingCost}\n                onChange={(e) => onFormChange(\"shippingCost\", e.target.value)}\n                placeholder=\"15.00\"\n                className=\"mt-1\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Template & Design */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Palette className=\"h-5 w-5\" />\n            Template & Design\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"template\">Invoice Template</Label>\n            <Select value={formData.template} onValueChange={(value) => {\n              const template = getTemplateById(value);\n              onFormChange(\"template\", value);\n              onFormChange(\"primaryColor\", template.primaryColor);\n              onFormChange(\"secondaryColor\", template.secondaryColor);\n              onFormChange(\"fontFamily\", template.fontFamily);\n            }}>\n              <SelectTrigger className=\"mt-1\">\n                <SelectValue placeholder=\"Select template\" />\n              </SelectTrigger>\n              <SelectContent>\n                {INVOICE_TEMPLATES.map((template) => (\n                  <SelectItem key={template.id} value={template.id}>\n                    {template.preview} {template.name} - {template.description}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"primaryColor\">Primary Color</Label>\n              <div className=\"flex gap-2 mt-1\">\n                <Input\n                  id=\"primaryColor\"\n                  type=\"color\"\n                  value={formData.primaryColor}\n                  onChange={(e) => onFormChange(\"primaryColor\", e.target.value)}\n                  className=\"w-12 h-10 p-1 border-2\"\n                />\n                <Input\n                  type=\"text\"\n                  value={formData.primaryColor}\n                  onChange={(e) => onFormChange(\"primaryColor\", e.target.value)}\n                  placeholder=\"#2563eb\"\n                  className=\"flex-1\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"secondaryColor\">Secondary Color</Label>\n              <div className=\"flex gap-2 mt-1\">\n                <Input\n                  id=\"secondaryColor\"\n                  type=\"color\"\n                  value={formData.secondaryColor}\n                  onChange={(e) => onFormChange(\"secondaryColor\", e.target.value)}\n                  className=\"w-12 h-10 p-1 border-2\"\n                />\n                <Input\n                  type=\"text\"\n                  value={formData.secondaryColor}\n                  onChange={(e) => onFormChange(\"secondaryColor\", e.target.value)}\n                  placeholder=\"#64748b\"\n                  className=\"flex-1\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"fontFamily\">Font Family</Label>\n              <Select value={formData.fontFamily} onValueChange={(value) => onFormChange(\"fontFamily\", value)}>\n                <SelectTrigger className=\"mt-1\">\n                  <SelectValue placeholder=\"Select font\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {FONT_FAMILIES.map((font) => (\n                    <SelectItem key={font.value} value={font.value}>\n                      {font.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8708}},"version":1}